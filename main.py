# main.py
"""
·ª®ng d·ª•ng qu·∫£n l√Ω v√¢n tay nh√¢n vi√™n - ERPNext HRMS
Entry point ch√≠nh c·ªßa ·ª©ng d·ª•ng
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import logging
import os
import sys
from datetime import datetime
import json
from typing import List, Dict, Optional
from PIL import Image, ImageTk

# Import c√°c module c·ªßa d·ª± √°n
from config import UI_CONFIG, LOG_CONFIG, FINGER_MAPPING, APP_INFO
from utils.logger import setup_logger
from core.erpnext_api import ERPNextAPI
from core.fingerprint_scanner import FingerprintScanner
from core.attendance_device_sync import AttendanceDeviceSync
from core.data_manager import DataManager
from gui.employee_management import EmployeeTab
from gui.dialogs import AttendanceIDDialog

# Thi·∫øt l·∫≠p logging
logger = setup_logger()


class FingerprintApp:
    """·ª®ng d·ª•ng ch√≠nh qu·∫£n l√Ω v√¢n tay"""
    
    def __init__(self):
        # Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh
        self.root = ctk.CTk()
        self.root.title(UI_CONFIG["app_title"])
        self.root.geometry(f"{UI_CONFIG['window_width']}x{UI_CONFIG['window_height']}")
        
        # Set appearance mode t·ª´ config
        ctk.set_appearance_mode(UI_CONFIG.get("appearance_mode", "light"))
        
        # Safe theme loading with fallback
        try:
            ctk.set_default_color_theme(UI_CONFIG["theme"])
        except Exception as e:
            logger.warning(f"Could not load theme '{UI_CONFIG['theme']}': {str(e)}")
            logger.info("Using default blue theme as fallback")
            ctk.set_default_color_theme("blue")
        
        # Kh·ªüi t·∫°o c√°c core components
        self.data_manager = DataManager()
        self.erpnext_api = ERPNextAPI()
        self.scanner = FingerprintScanner()
        self.device_sync = AttendanceDeviceSync(self.erpnext_api)
        
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        self.employees = []
        self.current_fingerprints = {}
        self.attendance_devices = []
        self.device_status = {}  # Th√™m device status tracking
        self.selected_employee = None
        self.selected_finger_index = None
        
        # Flags tr·∫°ng th√°i
        self.scanner_connected = False
        self.erpnext_connected = False
        self.is_connecting = False
        
        # T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
        self.load_initial_data()
        
        # T·∫°o giao di·ªán
        self.create_ui()
        
        logger.info("üöÄ ·ª®ng d·ª•ng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
    
    def load_initial_data(self):
        """T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu t·ª´ local"""
        try:
            # T·∫£i d·ªØ li·ªáu v√¢n tay local v·ªõi x·ª≠ l√Ω l·ªói JSON
            try:
                self.current_fingerprints = self.data_manager.load_local_fingerprints()
                logger.info(f"‚úÖ ƒê√£ t·∫£i {len(self.current_fingerprints)} nh√¢n vi√™n t·ª´ d·ªØ li·ªáu local")
            except Exception as json_error:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu v√¢n tay local: {str(json_error)}")
                self.current_fingerprints = {}
                logger.info("üìù Kh·ªüi t·∫°o d·ªØ li·ªáu v√¢n tay tr·ªëng")
            
            # T·∫£i c·∫•u h√¨nh m√°y ch·∫•m c√¥ng t·ª´ config.py
            self.attendance_devices = self.data_manager.load_device_config()
            logger.info(f"‚úÖ ƒê√£ t·∫£i {len(self.attendance_devices)} m√°y ch·∫•m c√¥ng t·ª´ config")
            
            # T·∫£i danh s√°ch nh√¢n vi√™n t·ª´ local
            self.load_employees_from_local()
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu: {str(e)}")
    
    def load_employees_from_local(self):
        """T·∫£i danh s√°ch nh√¢n vi√™n t·ª´ file local"""
        try:
            if os.path.exists("data/employees.json"):
                with open("data/employees.json", 'r', encoding='utf-8') as f:
                    self.employees = json.load(f)
                logger.info(f"‚úÖ ƒê√£ t·∫£i {len(self.employees)} nh√¢n vi√™n t·ª´ file local")
                # C·∫≠p nh·∫≠t UI sau khi t·∫£i
                self.root.after(0, lambda: self.employee_tab.update_employee_list())
            else:
                logger.info("üìù Ch∆∞a c√≥ file danh s√°ch nh√¢n vi√™n local")
                self.employees = []
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫£i danh s√°ch nh√¢n vi√™n local: {str(e)}")
            self.employees = []
    
    def create_ui(self):
        """T·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        # Main container
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Content area - single view
        content_frame = ctk.CTkFrame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # Employee management section
        self.employee_tab = EmployeeTab(content_frame, self)
        
        # C·∫≠p nh·∫≠t UI ban ƒë·∫ßu
        self.update_ui_state()
    
    def load_devices_from_erpnext_and_check(self):
        """T·∫£i m√°y ch·∫•m c√¥ng t·ª´ ERPNext v√† ki·ªÉm tra k·∫øt n·ªëi"""
        if not self.erpnext_connected:
            logger.warning("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi ERPNext, th·ª≠ k·∫øt n·ªëi...")
            if not self.connect_erpnext():
                logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ERPNext")
                return False
        
        def load_and_check_thread():
            try:
                logger.info("üîÑ ƒêang t·∫£i danh s√°ch m√°y ch·∫•m c√¥ng t·ª´ ERPNext...")
                
                # Th·ª≠ t·∫£i t·ª´ ERPNext
                devices_from_erpnext = self.erpnext_api.get_attendance_machines()
                
                if devices_from_erpnext:
                    self.attendance_devices = devices_from_erpnext
                    self.data_manager.save_device_config(self.attendance_devices)
                    logger.info(f"‚úÖ ƒê√£ t·∫£i {len(self.attendance_devices)} m√°y ch·∫•m c√¥ng t·ª´ ERPNext")
                else:
                    # Fallback 1: T·∫£i t·ª´ file JSON
                    logger.info("üìÅ Th·ª≠ t·∫£i t·ª´ file JSON local...")
                    try:
                        json_devices = self.data_manager.load_device_config()
                        if json_devices:
                            self.attendance_devices = json_devices
                            logger.info(f"‚úÖ ƒê√£ t·∫£i {len(self.attendance_devices)} m√°y ch·∫•m c√¥ng t·ª´ file JSON")
                        else:
                            raise Exception("Kh√¥ng c√≥ d·ªØ li·ªáu trong file JSON")
                    except Exception as json_error:
                        # Fallback 2: T·∫£i t·ª´ config.py
                        logger.info("‚öôÔ∏è S·ª≠ d·ª•ng c·∫•u h√¨nh t·ª´ config.py...")
                        from config import ATTENDANCE_DEVICES
                        self.attendance_devices = ATTENDANCE_DEVICES.copy()
                        logger.info(f"‚úÖ ƒê√£ t·∫£i {len(self.attendance_devices)} m√°y ch·∫•m c√¥ng t·ª´ config.py")
                
                # Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c√°c thi·∫øt b·ªã
                logger.info("üîç ƒêang ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c√°c m√°y ch·∫•m c√¥ng...")
                self.check_device_connections()
                
                # C·∫≠p nh·∫≠t UI
                self.root.after(0, lambda: [
                    self.employee_tab.update_device_sync_section(),
                    self.update_ui_state()
                ])
                
                logger.info("‚úÖ Ho√†n th√†nh t·∫£i v√† ki·ªÉm tra m√°y ch·∫•m c√¥ng")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói t·∫£i v√† ki·ªÉm tra m√°y ch·∫•m c√¥ng: {str(e)}")
                return False
        
        # Ch·∫°y trong thread ri√™ng
        threading.Thread(target=load_and_check_thread, daemon=True).start()
        return True
    
    def check_device_connections(self):
        """Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c√°c m√°y ch·∫•m c√¥ng"""
        import socket
        
        self.device_status = {}
        
        for device in self.attendance_devices:
            device_id = device.get('id')
            ip = device.get('ip', device.get('ip_address', ''))
            port = device.get('port', 4370)
            device_name = device.get('device_name', device.get('name', f'Device_{device_id}'))
            
            try:
                # T·∫°o socket v·ªõi timeout ng·∫Øn
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)  # Gi·∫£m timeout xu·ªëng 1 gi√¢y
                
                # Th·ª≠ k·∫øt n·ªëi
                result = sock.connect_ex((ip, port))
                sock.close()
                
                if result == 0:
                    self.device_status[device_id] = "connected"
                    logger.info(f"‚úÖ {device_name} ({ip}) - K·∫øt n·ªëi th√†nh c√¥ng")
                else:
                    self.device_status[device_id] = "disconnected"
                    logger.warning(f"‚ùå {device_name} ({ip}) - M·∫•t k·∫øt n·ªëi")
            except Exception as e:
                self.device_status[device_id] = "error"
                logger.error(f"‚ùå {device_name} ({ip}) - L·ªói k·∫øt n·ªëi: {str(e)}")
            
            # C·∫≠p nh·∫≠t UI sau m·ªói thi·∫øt b·ªã
            self.root.after(0, lambda: self.employee_tab.update_device_sync_section())
    
    def connect_scanner(self) -> bool:
        """K·∫øt n·ªëi m√°y qu√©t v√¢n tay"""
        try:
            if self.scanner.connect():
                self.scanner_connected = True
                logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi m√°y qu√©t v√¢n tay")
                return True
            else:
                logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y qu√©t v√¢n tay")
                return False
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi scanner: {str(e)}")
            return False
    
    def connect_erpnext(self) -> bool:
        """K·∫øt n·ªëi ƒë·∫øn ERPNext"""
        if self.is_connecting:
            return False
        
        self.is_connecting = True
        try:
            if self.erpnext_api.test_connection():
                self.erpnext_connected = True
                logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi ERPNext")
                
                # T·∫£i danh s√°ch nh√¢n vi√™n sau khi k·∫øt n·ªëi th√†nh c√¥ng
                employees = self.erpnext_api.get_all_employees()
                if employees:
                    self.employees = employees
                    self.save_employees_to_local()
                    logger.info(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(employees)} nh√¢n vi√™n t·ª´ ERPNext")
                    # C·∫≠p nh·∫≠t UI
                    self.root.after(0, lambda: self.employee_tab.update_employee_list())
                return True
            else:
                logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ERPNext")
                return False
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi ERPNext: {str(e)}")
            return False
        finally:
            self.is_connecting = False
    
    def save_employees_to_local(self):
        """L∆∞u danh s√°ch nh√¢n vi√™n v√†o file local"""
        try:
            os.makedirs("data", exist_ok=True)
            with open("data/employees.json", 'w', encoding='utf-8') as f:
                json.dump(self.employees, f, ensure_ascii=False, indent=4)
            logger.info(f"‚úÖ ƒê√£ l∆∞u {len(self.employees)} nh√¢n vi√™n v√†o file local")
        except Exception as e:
            logger.error(f"‚ùå L·ªói l∆∞u danh s√°ch nh√¢n vi√™n local: {str(e)}")
    
    def update_ui_state(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i giao di·ªán"""
        try:
            # C·∫≠p nh·∫≠t employee tab
            self.employee_tab.update_employee_list()
            self.employee_tab.update_connection_status(
                self.scanner_connected, 
                self.erpnext_connected
            )
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t UI: {str(e)}")
    
    def set_selected_finger(self, employee, finger_index):
        """Thi·∫øt l·∫≠p ng√≥n tay ƒë∆∞·ª£c ch·ªçn"""
        self.selected_employee = employee
        self.selected_finger_index = finger_index
    
    def scan_fingerprint(self):
        """Qu√©t v√¢n tay cho ng√≥n ƒë∆∞·ª£c ch·ªçn"""
        if not self.scanner_connected:
            messagebox.showerror("L·ªói", "M√°y qu√©t v√¢n tay ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi!")
            return
        
        if not self.selected_employee or self.selected_finger_index is None:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn nh√¢n vi√™n v√† ng√≥n tay!")
            return
        
        def scan_thread():
            try:
                # Qu√©t v√¢n tay
                template_data = self.scanner.enroll_fingerprint(self.selected_finger_index)
                
                if template_data:
                    # Encode template data
                    import base64
                    template_b64 = base64.b64encode(template_data).decode('utf-8')
                    
                    # L∆∞u v√†o d·ªØ li·ªáu hi·ªán t·∫°i
                    employee_id = self.selected_employee['employee']
                    
                    if employee_id not in self.current_fingerprints:
                        self.current_fingerprints[employee_id] = {
                            'name': self.selected_employee['name'],
                            'employee': employee_id,
                            'employee_name': self.selected_employee['employee_name'],
                            'attendance_device_id': self.selected_employee.get('attendance_device_id', ''),
                            'password': self.selected_employee.get('custom_attendance_password', '123456'),
                            'privilege': self.selected_employee.get('custom_attendance_privilege', 0),
                            'fingerprints': []
                        }
                    
                    # X√≥a v√¢n tay c≈© cho ng√≥n n√†y (n·∫øu c√≥)
                    fingerprints = self.current_fingerprints[employee_id]['fingerprints']
                    fingerprints = [fp for fp in fingerprints if fp['finger_index'] != self.selected_finger_index]
                    
                    # Th√™m v√¢n tay m·ªõi
                    finger_name = FINGER_MAPPING.get(self.selected_finger_index, f"Ng√≥n {self.selected_finger_index}")
                    fingerprints.append({
                        'finger_index': self.selected_finger_index,
                        'finger_name': finger_name,
                        'template_data': template_b64,
                        'quality_score': 70
                    })
                    
                    self.current_fingerprints[employee_id]['fingerprints'] = fingerprints
                    
                    # C·∫≠p nh·∫≠t UI
                    self.root.after(0, lambda: [
                        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ qu√©t th√†nh c√¥ng v√¢n tay {finger_name}!"),
                        self.employee_tab.update_fingerprint_display() if hasattr(self.employee_tab, 'update_fingerprint_display') else None
                    ])
                    
                    logger.info(f"‚úÖ ƒê√£ qu√©t th√†nh c√¥ng v√¢n tay {finger_name} cho {employee_id}")
                else:
                    self.root.after(0, lambda: messagebox.showerror("L·ªói", "Qu√©t v√¢n tay th·∫•t b·∫°i!"))
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói qu√©t v√¢n tay: {str(e)}")
                self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói qu√©t v√¢n tay: {str(e)}"))
        
        # Ch·∫°y trong thread ri√™ng
        threading.Thread(target=scan_thread, daemon=True).start()
    
    def save_fingerprints(self):
        """L∆∞u d·ªØ li·ªáu v√¢n tay"""
        try:
            # Ki·ªÉm tra nh√¢n vi√™n ch∆∞a c√≥ attendance_device_id
            employees_without_id = []
            for emp_id, emp_data in self.current_fingerprints.items():
                if not emp_data.get('attendance_device_id') or str(emp_data.get('attendance_device_id')).strip() == '':
                    employees_without_id.append(emp_data)
            
            # N·∫øu c√≥ nh√¢n vi√™n ch∆∞a c√≥ ID, hi·ªÉn th·ªã dialog
            if employees_without_id:
                dialog = AttendanceIDDialog(self.root, employees_without_id)
                if dialog.result:
                    # G√°n ID t·ª± ƒë·ªông v√† c·∫≠p nh·∫≠t ERPNext
                    self.assign_attendance_ids(employees_without_id)
            
            # L∆∞u v√†o file local
            self.data_manager.save_local_fingerprints(self.current_fingerprints)
            
            # L∆∞u v√†o ERPNext n·∫øu c√≥ k·∫øt n·ªëi
            if self.erpnext_connected:
                self.save_to_erpnext()
            
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u d·ªØ li·ªáu v√¢n tay th√†nh c√¥ng!")
            logger.info("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√¢n tay")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói l∆∞u d·ªØ li·ªáu: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói l∆∞u d·ªØ li·ªáu: {str(e)}")
    
    def assign_attendance_ids(self, employees_without_id):
        """G√°n attendance_device_id t·ª± ƒë·ªông"""
        try:
            # T√¨m ID l·ªõn nh·∫•t hi·ªán t·∫°i
            max_id = 0
            
            # Ki·ªÉm tra trong current_fingerprints
            for emp_data in self.current_fingerprints.values():
                try:
                    current_id = int(emp_data.get('attendance_device_id', 0))
                    max_id = max(max_id, current_id)
                except ValueError:
                    pass
            
            # Ki·ªÉm tra trong employees t·ª´ ERPNext
            for emp in self.employees:
                try:
                    current_id = int(emp.get('attendance_device_id', 0))
                    max_id = max(max_id, current_id)
                except ValueError:
                    pass
            
            # G√°n ID tƒÉng d·∫ßn
            for emp_data in employees_without_id:
                max_id += 1
                emp_data['attendance_device_id'] = str(max_id)
                
                # C·∫≠p nh·∫≠t ERPNext
                if self.erpnext_connected:
                    self.erpnext_api.update_employee_attendance_device_id(
                        emp_data['name'], 
                        max_id
                    )
                
                logger.info(f"‚úÖ ƒê√£ g√°n ID {max_id} cho {emp_data['employee']}")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói g√°n attendance_device_id: {str(e)}")
    
    def save_to_erpnext(self):
        """L∆∞u d·ªØ li·ªáu v√¢n tay v√†o ERPNext"""
        try:
            for emp_id, emp_data in self.current_fingerprints.items():
                for fp in emp_data.get('fingerprints', []):
                    # Decode base64 template
                    import base64
                    template_bytes = base64.b64decode(fp['template_data'])
                    
                    # L∆∞u v√†o ERPNext
                    self.erpnext_api.save_fingerprint_to_employee(
                        emp_data['name'],
                        fp['finger_index'],
                        template_bytes,
                        fp.get('quality_score', 70)
                    )
            
            logger.info("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√¢n tay v√†o ERPNext")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói l∆∞u v√†o ERPNext: {str(e)}")
    
    def sync_to_devices(self, selected_devices):
        """ƒê·ªìng b·ªô d·ªØ li·ªáu ƒë·∫øn m√°y ch·∫•m c√¥ng"""
        if not self.current_fingerprints:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu v√¢n tay ƒë·ªÉ ƒë·ªìng b·ªô!")
            return
        
        def sync_thread():
            try:
                # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªìng b·ªô
                employees_to_sync = []
                for emp_data in self.current_fingerprints.values():
                    if emp_data.get('fingerprints') and emp_data.get('attendance_device_id'):
                        employees_to_sync.append(emp_data)
                
                if not employees_to_sync:
                    self.root.after(0, lambda: messagebox.showwarning(
                        "C·∫£nh b√°o", 
                        "Kh√¥ng c√≥ nh√¢n vi√™n n√†o c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë·ªìng b·ªô!"
                    ))
                    return
                
                # ƒê·ªìng b·ªô ƒë·∫øn c√°c thi·∫øt b·ªã ƒë∆∞·ª£c ch·ªçn
                results = {}
                for device in selected_devices:
                    # ƒê·∫£m b·∫£o device c√≥ ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt
                    if not device.get('name'):
                        device['name'] = device.get('device_name', f"Device_{device.get('id', 1)}")
                    
                    device_name = device.get('device_name', device.get('name', 'Unknown'))
                    logger.info(f"üîÑ ƒê·ªìng b·ªô ƒë·∫øn thi·∫øt b·ªã: {device_name}")
                    success, total = self.device_sync.sync_to_device(device, employees_to_sync)
                    results[device_name] = (success, total)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                result_text = "K·∫øt qu·∫£ ƒë·ªìng b·ªô:\n"
                for device_name, (success, total) in results.items():
                    result_text += f"‚Ä¢ {device_name}: {success}/{total} nh√¢n vi√™n\n"
                
                self.root.after(0, lambda: messagebox.showinfo("Ho√†n th√†nh", result_text))
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói ƒë·ªìng b·ªô: {str(e)}")
                self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói ƒë·ªìng b·ªô: {str(e)}"))
        
        # Ch·∫°y trong thread ri√™ng
        threading.Thread(target=sync_thread, daemon=True).start()
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        try:
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        except Exception as e:
            logger.error(f"‚ùå L·ªói ch·∫°y ·ª©ng d·ª•ng: {str(e)}")
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        try:
            # Ng·∫Øt k·∫øt n·ªëi c√°c thi·∫øt b·ªã
            if self.scanner_connected:
                self.scanner.disconnect()
            
            self.device_sync.disconnect_all_devices()
            
            logger.info("üëã ƒê√£ ƒë√≥ng ·ª©ng d·ª•ng")
            self.root.destroy()
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ƒë√≥ng ·ª©ng d·ª•ng: {str(e)}")
            self.root.destroy()


def main():
    """H√†m main kh·ªüi ch·∫°y ·ª©ng d·ª•ng"""
    try:
        app = FingerprintApp()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå L·ªói import module: {str(e)}")
        print("Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t v√† c√°c module c·∫ßn thi·∫øt.")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ch·∫°y ·ª©ng d·ª•ng: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()