# attendance_device_sync.py
"""
Module ƒë·ªìng b·ªô d·ªØ li·ªáu v√¢n tay ƒë·∫øn m√°y ch·∫•m c√¥ng ZKTeco
"""

import logging
from typing import List, Dict, Optional, Tuple
from datetime import datetime
import base64
import socket
import time
from zk import ZK, const
from zk.base import Finger
from config import ATTENDANCE_DEVICES, FINGERPRINT_CONFIG
from core.erpnext_api import ERPNextAPI

logger = logging.getLogger(__name__)


class AttendanceDeviceSync:
    """L·ªõp x·ª≠ l√Ω ƒë·ªìng b·ªô d·ªØ li·ªáu v·ªõi m√°y ch·∫•m c√¥ng"""
    
    def __init__(self, erpnext_api: ERPNextAPI):
        self.erpnext_api = erpnext_api
        self.connected_devices = {}
        
    def connect_device(self, device_config: Dict) -> Optional[ZK]:
        """
        K·∫øt n·ªëi v·ªõi m·ªôt m√°y ch·∫•m c√¥ng
        
        Args:
            device_config: Th√¥ng tin c·∫•u h√¨nh thi·∫øt b·ªã
            
        Returns:
            ZK object n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        try:
            device_name = device_config.get('device_name', device_config.get('name', f"Device_{device_config.get('id', 1)}"))
            device_ip = device_config.get('ip', device_config.get('ip_address', ''))
            device_port = device_config.get('port', 4370)
            
            logger.info(f"üîå ƒêang k·∫øt n·ªëi v·ªõi {device_name} ({device_ip}:{device_port})...")
            
            if not device_ip:
                logger.error(f"‚ùå Thi·∫øt b·ªã {device_name} kh√¥ng c√≥ ƒë·ªãa ch·ªâ IP")
                return None
            
            # T·∫°o instance ZK v·ªõi th√¥ng tin t·ª´ config
            zk = ZK(
                device_ip, 
                port=device_port, 
                timeout=device_config.get('timeout', 10),
                password=device_config.get('password', 0),
                force_udp=device_config.get('force_udp', True),
                ommit_ping=device_config.get('ommit_ping', True)
            )
            
            # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((device_ip, device_port))
                if result != 0:
                    logger.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {device_ip}:{device_port} - L·ªói: {result}")
                    return None
                sock.close()
            except Exception as e:
                logger.error(f"‚ùå L·ªói ki·ªÉm tra k·∫øt n·ªëi m·∫°ng: {str(e)}")
                return None
            
            # K·∫øt n·ªëi v·ªõi thi·∫øt b·ªã
            try:
                conn = zk.connect()
                if not conn:
                    raise Exception("Failed to connect to device")
            except Exception as e:
                logger.error(f"‚ùå L·ªói k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã: {str(e)}")
                return None
            
            # T·∫°m th·ªùi v√¥ hi·ªáu h√≥a thi·∫øt b·ªã ƒë·ªÉ tr√°nh xung ƒë·ªôt
            try:
                conn.disable_device()
            except Exception as e:
                logger.error(f"‚ùå L·ªói v√¥ hi·ªáu h√≥a thi·∫øt b·ªã: {str(e)}")
                return None
            
            # L·∫•y th√¥ng tin thi·∫øt b·ªã
            try:
                device_info = {
                    'serial': conn.get_serialnumber(),
                    'platform': conn.get_platform(),
                    'device_name': conn.get_device_name(),
                    'firmware': conn.get_firmware_version(),
                    'users': len(conn.get_users()),
                    'fingerprints': conn.get_fp_version()
                }
                
                logger.info(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi {device_name}")
                logger.info(f"   üì± Model: {device_info['device_name']}")
                logger.info(f"   üî¢ Serial: {device_info['serial']}")
                logger.info(f"   üë• S·ªë ng∆∞·ªùi d√πng: {device_info['users']}")
                
                # L∆∞u connection
                device_id = device_config.get('id', 1)
                self.connected_devices[device_id] = conn
                
                return conn
            except Exception as e:
                logger.error(f"‚ùå L·ªói l·∫•y th√¥ng tin thi·∫øt b·ªã: {str(e)}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi v·ªõi {device_name}: {str(e)}")
            return None
    
    def disconnect_device(self, device_id: int):
        """Ng·∫Øt k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã"""
        if device_id in self.connected_devices:
            try:
                self.connected_devices[device_id].enable_device()
                self.connected_devices[device_id].disconnect()
                del self.connected_devices[device_id]
                logger.info(f"‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã ID: {device_id}")
            except Exception as e:
                logger.error(f"‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi: {str(e)}")
    
    def disconnect_all_devices(self):
        """Ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£ thi·∫øt b·ªã"""
        device_ids = list(self.connected_devices.keys())
        for device_id in device_ids:
            self.disconnect_device(device_id)

    def sync_employee_to_device(self, zk: ZK, employee_data: Dict, 
                               fingerprints: List[Dict]) -> bool:
        """
        ƒê·ªìng b·ªô d·ªØ li·ªáu m·ªôt nh√¢n vi√™n ƒë·∫øn thi·∫øt b·ªã s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p m·ªõi
        
        Args:
            zk: ZK connection object
            employee_data: Th√¥ng tin nh√¢n vi√™n (bao g·ªìm attendance_device_id)
            fingerprints: Danh s√°ch v√¢n tay c·ªßa nh√¢n vi√™n
            
        Returns:
            True n·∫øu ƒë·ªìng b·ªô th√†nh c√¥ng
        """
        try:
            # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if not employee_data:
                logger.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n")
                return False
                
            if not fingerprints:
                logger.warning(f"‚ö†Ô∏è Nh√¢n vi√™n {employee_data.get('employee', 'Unknown')} kh√¥ng c√≥ d·ªØ li·ªáu v√¢n tay")
                return False
            
            # L·∫•y attendance_device_id
            user_id = employee_data.get('attendance_device_id')
            if not user_id:
                logger.error(f"‚ùå Nh√¢n vi√™n {employee_data.get('employee', 'Unknown')} ch∆∞a c√≥ attendance_device_id")
                return False
            
            # # Chuy·ªÉn ƒë·ªïi user_id sang s·ªë
            # try:
            #     user_id = int(user_id)
            # except ValueError:
            #     logger.error(f"‚ùå attendance_device_id kh√¥ng h·ª£p l·ªá: {user_id}")
            #     return False
            
            logger.info(f"üë§ ƒêang x·ª≠ l√Ω nh√¢n vi√™n: {employee_data['employee']} - {employee_data['employee_name']} (ID: {user_id})")
            
            # Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing_users = zk.get_users()
            user_exists = any(u.user_id == user_id for u in existing_users) 
            if user_exists:
                logger.info(f"üóëÔ∏è User {user_id} ƒë√£ t·ªìn t·∫°i. ƒêang x√≥a user c≈©...")
                zk.delete_user(user_id=user_id)
                logger.info(f"‚úÖ ƒê√£ x√≥a user {user_id}.")
                time.sleep(0.5)  # Cho thi·∫øt b·ªã m·ªôt ch√∫t th·ªùi gian
            
            # T·∫°o user m·ªõi
            logger.info(f"‚ûï T·∫°o m·ªõi user {user_id}...") 
            full_name = employee_data['employee_name']
            shortened_name = self.shorted_name(full_name,24)  
            privilege= const.USER_ADMIN if employee_data['employee_name']=='USER_ADMIN' else const.USER_DEFAULT
            zk.set_user(user_id=user_id, name=shortened_name, privilege=privilege, password= employee_data['password']) 
            
            # L·∫•y l·∫°i th√¥ng tin user sau khi t·∫°o
            users = zk.get_users()
            user = next((u for u in users if u.user_id == user_id), None)
            if not user:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t√¨m th·∫•y user {user_id} sau khi t·∫°o.")
                return False
            uid_int = user.uid
            # Chu·∫©n b·ªã danh s√°ch template ƒë·ªÉ g·ª≠i
            templates_to_send = []
            success_count = 0
            
            # T·∫°o 10 Finger objects, v·ªõi template th·ª±c cho c√°c ng√≥n c√≥ d·ªØ li·ªáu
            for i in range(10):
                # T√¨m v√¢n tay cho ng√≥n tay n√†y
                finger_data = None
                for fp in fingerprints:
                    if fp.get('finger_index') == i and fp.get('template_data'):
                        finger_data = fp
                        break
                
                if finger_data:
                    try:
                        # Decode base64 template data
                        template_bytes = base64.b64decode(finger_data['template_data'])
                        finger_obj = Finger(uid=uid_int, fid=i, valid=True, template=template_bytes)
                        templates_to_send.append(finger_obj)
                        logger.info(f"   ‚úÖ Chu·∫©n b·ªã template cho ng√≥n {i}")
                        success_count += 1
                    except Exception as e:
                        logger.error(f"   ‚ùå L·ªói x·ª≠ l√Ω template ng√≥n {i}: {str(e)}")
                        finger_obj = Finger(uid=uid_int, fid=i, valid=False, template=b'')
                        templates_to_send.append(finger_obj)
                else:
                    # Ng√≥n tay kh√¥ng c√≥ d·ªØ li·ªáu, t·∫°o template tr·ªëng
                    finger_obj = Finger(uid=uid_int, fid=i, valid=False, template=b'')
                    templates_to_send.append(finger_obj)
            
            # G·ª≠i t·∫•t c·∫£ template l√™n thi·∫øt b·ªã
            logger.info(f"üì§ G·ª≠i {success_count} template v√¢n tay l√™n m√°y ch·∫•m c√¥ng...")
            
            try:
                zk.save_user_template(user, templates_to_send)
                logger.info(f"‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng {success_count} template cho user {uid_int}")
                
                # Ghi log ƒë·ªìng b·ªô
                try:
                    self.erpnext_api.log_sync_history(
                        sync_type="fingerprint_sync_to_device",
                        device_name=zk.get_device_name(),
                        employee_count=1,
                        status="success",
                        message=f"ƒê·ªìng b·ªô th√†nh c√¥ng {success_count} v√¢n tay cho {employee_data['employee']}"
                    )
                except Exception as e:
                    logger.error(f"‚ùå L·ªói ghi log ƒë·ªìng b·ªô: {str(e)}")
                
                return True
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi g·ª≠i template: {str(e)}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói ƒë·ªìng b·ªô nh√¢n vi√™n {employee_data.get('employee', 'Unknown')}: {str(e)}")
            return False
    
    def sync_to_device(self, device_config: dict, employees: List[dict]) -> Tuple[int, int]:
        """
        ƒê·ªìng b·ªô d·ªØ li·ªáu v√¢n tay ƒë·∫øn m·ªôt thi·∫øt b·ªã c·ª• th·ªÉ
        
        Args:
            device_config: C·∫•u h√¨nh thi·∫øt b·ªã
            employees: Danh s√°ch nh√¢n vi√™n c·∫ßn ƒë·ªìng b·ªô
            
        Returns:
            Tuple[int, int]: (s·ªë nh√¢n vi√™n ƒë·ªìng b·ªô th√†nh c√¥ng, t·ªïng s·ªë nh√¢n vi√™n)
        """
        device_name = device_config.get('device_name', device_config.get('name', f"Device_{device_config.get('id', 1)}"))
        device_ip = device_config.get('ip', device_config.get('ip_address', ''))
        
        logger.info(f"üéØ ƒê·ªìng b·ªô ƒë·∫øn: {device_name}")
        logger.info("=" * 60)
        
        # K·∫øt n·ªëi thi·∫øt b·ªã
        logger.info(f"üîå ƒêang k·∫øt n·ªëi v·ªõi {device_name} ({device_ip})...")
        zk = self.connect_device(device_config)
        
        if not zk:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi v·ªõi {device_name}")
            return 0, 0
            
        try:
            # L·ªçc nh√¢n vi√™n c√≥ v√¢n tay v√† attendance_device_id h·ª£p l·ªá
            valid_employees = []
            for emp in employees:
                if not emp.get('fingerprints'):
                    continue
                    
                # Ki·ªÉm tra attendance_device_id
                attendance_id = emp.get('attendance_device_id')
                if not attendance_id or str(attendance_id).strip() == "":
                    logger.warning(f"‚ö†Ô∏è Nh√¢n vi√™n {emp['employee']} - {emp['employee_name']} ch∆∞a c√≥ ID m√°y ch·∫•m c√¥ng")
                    continue
                    
                try:
                    attendance_id = int(attendance_id)
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è ID m√°y ch·∫•m c√¥ng kh√¥ng h·ª£p l·ªá cho nh√¢n vi√™n {emp['employee']}: {attendance_id}")
                    continue
                    
                # Ki·ªÉm tra v√¢n tay
                has_valid_fingerprints = False
                for fp in emp['fingerprints']:
                    if fp.get('template_data'):
                        has_valid_fingerprints = True
                        break
                        
                if not has_valid_fingerprints:
                    logger.warning(f"‚ö†Ô∏è Nh√¢n vi√™n {emp['employee']} - {emp['employee_name']} kh√¥ng c√≥ v√¢n tay h·ª£p l·ªá")
                    continue
                    
                valid_employees.append(emp)
            
            if not valid_employees:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o h·ª£p l·ªá ƒë·ªÉ ƒë·ªìng b·ªô ƒë·∫øn {device_name}")
                return 0, 0
                
            # ƒê·ªìng b·ªô t·ª´ng nh√¢n vi√™n
            success_count = 0
            total_count = len(valid_employees)
            
            for emp in valid_employees:
                try:
                    if self.sync_employee_to_device(zk, emp, emp['fingerprints']):
                        success_count += 1
                        logger.info(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô th√†nh c√¥ng nh√¢n vi√™n {emp['employee']} - {emp['employee_name']}")
                    else:
                        logger.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô nh√¢n vi√™n {emp['employee']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå L·ªói khi ƒë·ªìng b·ªô nh√¢n vi√™n {emp['employee']}: {str(e)}")
                    continue
            
            return success_count, total_count
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ƒë·ªìng b·ªô ƒë·∫øn {device_name}: {str(e)}")
            return 0, 0
            
        finally:
            # Ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã
            device_id = device_config.get('id', 1)
            self.disconnect_device(device_id)
    
    def sync_all_to_device(self, device_config: Dict, employees_to_sync: List[Dict]) -> Tuple[int, int]:
        """
        ƒê·ªìng b·ªô danh s√°ch nh√¢n vi√™n c·ª• th·ªÉ ƒë·∫øn m·ªôt thi·∫øt b·ªã
        
        Args:
            device_config: Th√¥ng tin c·∫•u h√¨nh thi·∫øt b·ªã
            employees_to_sync: Danh s√°ch nh√¢n vi√™n c·∫ßn ƒë·ªìng b·ªô (ƒë√£ c√≥ v√¢n tay trong current_fingerprints)
            
        Returns:
            Tuple (s·ªë nh√¢n vi√™n th√†nh c√¥ng, t·ªïng s·ªë nh√¢n vi√™n)
        """
        success_count = 0
        total_count = len(employees_to_sync)
        
        # K·∫øt n·ªëi thi·∫øt b·ªã
        zk = self.connect_device(device_config)
        if not zk:
            return 0, 0
        
        try:
            device_name = device_config.get('device_name', device_config.get('name', f"Device_{device_config.get('id', 1)}"))
            logger.info(f"üìä B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô {total_count} nh√¢n vi√™n ƒë·∫øn {device_name}")
            
            # ƒê·ªìng b·ªô t·ª´ng nh√¢n vi√™n
            for i, employee in enumerate(employees_to_sync, 1):
                logger.info(f"\n[{i}/{total_count}] ƒêang x·ª≠ l√Ω {employee['employee']} - {employee['employee_name']}")
                
                # L·∫•y d·ªØ li·ªáu v√¢n tay t·ª´ employee object
                fingerprints = employee.get('fingerprints', [])
                
                # Ki·ªÉm tra d·ªØ li·ªáu v√¢n tay
                if not fingerprints:
                    logger.warning(f"   ‚ö†Ô∏è Nh√¢n vi√™n kh√¥ng c√≥ d·ªØ li·ªáu v√¢n tay ƒë·ªÉ ƒë·ªìng b·ªô")
                    continue
                    
                # Ki·ªÉm tra template data
                valid_fingerprints = []
                for fp in fingerprints:
                    if not isinstance(fp, dict):
                        logger.error(f"   ‚ùå D·ªØ li·ªáu v√¢n tay kh√¥ng h·ª£p l·ªá: {type(fp)}")
                        continue
                        
                    template_data = fp.get('template_data')
                    if not template_data:
                        logger.error(f"   ‚ùå Kh√¥ng c√≥ template data cho ng√≥n {fp.get('finger_index', 'Unknown')}")
                        continue
                        
                    valid_fingerprints.append(fp)
                
                if not valid_fingerprints:
                    logger.warning(f"   ‚ö†Ô∏è Kh√¥ng c√≥ v√¢n tay h·ª£p l·ªá ƒë·ªÉ ƒë·ªìng b·ªô")
                    continue
                    
                # ƒê·ªìng b·ªô
                if self.sync_employee_to_device(zk, employee, valid_fingerprints):
                    success_count += 1
                    logger.info(f"   ‚úÖ ƒê√£ ƒë·ªìng b·ªô th√†nh c√¥ng")
                else:
                    logger.error(f"   ‚ùå ƒê·ªìng b·ªô th·∫•t b·∫°i")
            
            # Ghi log ƒë·ªìng b·ªô t·ªïng
            try:
                device_name = device_config.get('device_name', device_config.get('name', f"Device_{device_config.get('id', 1)}"))
                self.erpnext_api.log_sync_history(
                    sync_type="fingerprint_sync_to_device",
                    device_name=device_name,
                    employee_count=success_count,
                    status="success" if success_count > 0 else "failed",
                    message=f"ƒê·ªìng b·ªô th√†nh c√¥ng {success_count}/{total_count} nh√¢n vi√™n"
                )
            except Exception as e:
                logger.error(f"‚ùå L·ªói ghi log ƒë·ªìng b·ªô: {str(e)}")
            
            logger.info(f"\n‚úÖ Ho√†n th√†nh ƒë·ªìng b·ªô: {success_count}/{total_count} nh√¢n vi√™n")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh ƒë·ªìng b·ªô: {str(e)}")
            
        finally:
            # Ng·∫Øt k·∫øt n·ªëi
            device_id = device_config.get('id', 1)
            self.disconnect_device(device_id)
            
        return success_count, total_count
    
    def sync_to_all_devices(self, employees_to_sync: List[Dict]) -> Dict[str, Tuple[int, int]]:
        """
        ƒê·ªìng b·ªô danh s√°ch nh√¢n vi√™n c·ª• th·ªÉ ƒë·∫øn t·∫•t c·∫£ c√°c thi·∫øt b·ªã
        
        Args:
            employees_to_sync: Danh s√°ch nh√¢n vi√™n c·∫ßn ƒë·ªìng b·ªô
            
        Returns:
            Dict v·ªõi key l√† t√™n thi·∫øt b·ªã, value l√† (success_count, total_count)
        """
        results = {}
        
        logger.info(f"üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô ƒë·∫øn {len(ATTENDANCE_DEVICES)} thi·∫øt b·ªã")
        
        for device in ATTENDANCE_DEVICES:
            device_name = device.get('device_name', device.get('name', f"Device_{device.get('id', 1)}"))
            logger.info(f"\n{'='*60}")
            logger.info(f"üéØ ƒê·ªìng b·ªô ƒë·∫øn: {device_name}")
            logger.info(f"{'='*60}")
            
            success, total = self.sync_all_to_device(device, employees_to_sync)
            results[device_name] = (success, total)
        
        # T·ªïng k·∫øt
        logger.info(f"\n{'='*60}")
        logger.info(f"üìä T·ªîNG K·∫æT ƒê·ªíNG B·ªò")
        logger.info(f"{'='*60}")
        
        for device_name, (success, total) in results.items():
            logger.info(f"‚úÖ {device_name}: {success}/{total} nh√¢n vi√™n")
        
        return results
    
    def delete_employee_from_device(self, zk: ZK, user_id: int) -> bool:
        """
        X√≥a nh√¢n vi√™n kh·ªèi thi·∫øt b·ªã
        
        Args:
            zk: ZK connection object
            user_id: ID c·ªßa nh√¢n vi√™n tr√™n thi·∫øt b·ªã
            
        Returns:
            True n·∫øu x√≥a th√†nh c√¥ng
        """
        try:
            logger.info(f"üóëÔ∏è ƒêang x√≥a user ID: {user_id}")
            
            # X√≥a user
            zk.delete_user(uid=user_id)
            
            logger.info(f"‚úÖ ƒê√£ x√≥a user ID: {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói x√≥a user: {str(e)}")
            return False
    
    def get_device_users(self, device_config: Dict) -> List[Dict]:
        """
        L·∫•y danh s√°ch users t·ª´ thi·∫øt b·ªã
        
        Args:
            device_config: Th√¥ng tin c·∫•u h√¨nh thi·∫øt b·ªã
            
        Returns:
            Danh s√°ch th√¥ng tin users
        """
        users_list = []
        
        zk = self.connect_device(device_config)
        if not zk:
            return users_list
        
        try:
            users = zk.get_users()
            
            for user in users:
                user_info = {
                    'user_id': user.user_id,
                    'uid': user.uid,
                    'name': user.name,
                    'privilege': user.privilege,
                    'password': user.password,
                    'group_id': user.group_id,
                    'card': user.card
                }
                users_list.append(user_info)
            
            device_name = device_config.get('device_name', device_config.get('name', f"Device_{device_config.get('id', 1)}"))
            logger.info(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(users_list)} users t·ª´ {device_name}")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch users: {str(e)}")
            
        finally:
            device_id = device_config.get('id', 1)
            self.disconnect_device(device_id)
        
        return users_list
    
    def clear_device_data(self, device_config: Dict) -> bool:
        """
        X√≥a to√†n b·ªô d·ªØ li·ªáu users v√† v√¢n tay tr√™n thi·∫øt b·ªã
        
        Args:
            device_config: Th√¥ng tin c·∫•u h√¨nh thi·∫øt b·ªã
            
        Returns:
            True n·∫øu x√≥a th√†nh c√¥ng
        """
        zk = self.connect_device(device_config)
        if not zk:
            return False
        
        try:
            device_name = device_config.get('device_name', device_config.get('name', f"Device_{device_config.get('id', 1)}"))
            logger.warning(f"‚ö†Ô∏è ƒêang x√≥a to√†n b·ªô d·ªØ li·ªáu tr√™n {device_name}...")
            
            # X√≥a t·∫•t c·∫£ users
            zk.clear_data()
            
            logger.info(f"‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu tr√™n {device_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói x√≥a d·ªØ li·ªáu: {str(e)}")
            return False
            
        finally:
            device_id = device_config.get('id', 1)
            self.disconnect_device(device_id)
    def shorten_employee_name(full_name, max_length=24):
        """
        R√∫t g·ªçn t√™n nh√¢n vi√™n n·∫øu v∆∞·ª£t qu√° ƒë·ªô d√†i t·ªëi ƒëa
        
        Args:
            full_name: T√™n ƒë·∫ßy ƒë·ªß c·ªßa nh√¢n vi√™n
            max_length: ƒê·ªô d√†i t·ªëi ƒëa cho ph√©p
            
        Returns:
            T√™n ƒë√£ r√∫t g·ªçn
        """
        if not full_name or len(full_name) <= max_length:
            return full_name
            
        # T√°ch c√°c ph·∫ßn trong t√™n
        name_parts = full_name.split()
        
        if len(name_parts) <= 2:
            # N·∫øu ch·ªâ c√≥ 1-2 ph·∫ßn, c·∫Øt ng·∫Øn ƒë∆°n gi·∫£n
            return full_name[:max_length]
        
        # L·∫•y ch·ªØ c√°i ƒë·∫ßu c·ªßa c√°c ph·∫ßn tr·ª´ ph·∫ßn cu·ªëi
        initials = ''.join(part[0] for part in name_parts[:-1])
        
        # K·∫øt h·ª£p ch·ªØ c√°i ƒë·∫ßu v·ªõi ph·∫ßn cu·ªëi
        shortened_name = f"{initials} {name_parts[-1]}"
        
        # N·∫øu v·∫´n d√†i qu√°, c·∫Øt ng·∫Øn
        if len(shortened_name) > max_length:
            return shortened_name[:max_length]
        
        return shortened_name           
    def shorted_name(self, full_name: str, max_length=24):
        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        text_processed = ' '.join(full_name.split()).strip()

        if len(text_processed) > max_length:
            parts = text_processed.split()
            if len(parts) > 1:
                # L·∫•y ch·ªØ c√°i ƒë·∫ßu c·ªßa t·∫•t c·∫£ c√°c ph·∫ßn tr·ª´ ph·∫ßn cu·ªëi c√πng
                initials = "".join(part[0].upper() for part in parts[:-1])
                last_part = parts[-1]
                return f"{initials} {last_part}"
            else:
                # N·∫øu ch·ªâ c√≥ m·ªôt t·ª´ v√† qu√° d√†i, tr·∫£ v·ªÅ nguy√™n b·∫£n
                return text_processed
        else:
            return text_processed