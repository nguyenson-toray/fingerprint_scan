"""
Tab qu·∫£n l√Ω nh√¢n vi√™n v·ªõi thi·∫øt k·∫ø ƒë∆°n tab v√† hi·ªÉn th·ªã tr·∫°ng th√°i m√°y ch·∫•m c√¥ng chi ti·∫øt
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox
import logging
from typing import Dict, List, Optional
from config import FINGER_MAPPING
import threading

logger = logging.getLogger(__name__)

class EmployeeTab:
    """Tab qu·∫£n l√Ω nh√¢n vi√™n v·ªõi enhanced UI v√† device status display"""
    
    def __init__(self, parent, main_app):
        self.parent = parent
        self.main_app = main_app
        self.create_widgets()
    
    def create_widgets(self):
        """T·∫°o c√°c widget cho tab nh√¢n vi√™n v·ªõi layout c√¢n ƒë·ªëi"""
        # Main container
        main_frame = ctk.CTkFrame(self.parent)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Left side: Employee list (width c√¢n ƒë·ªëi v·ªõi right side)
        left_frame = ctk.CTkFrame(main_frame, width=400)
        left_frame.pack(side="left", fill="y", padx=(0, 5))
        left_frame.pack_propagate(False)
        
        self.create_employee_panel(left_frame)
        
        # Middle section: Finger selection and actions
        middle_frame = ctk.CTkFrame(main_frame, width=320)
        middle_frame.pack(side="left", fill="y", padx=5)
        middle_frame.pack_propagate(False)
        
        self.create_control_panel(middle_frame)
        
        # Right side: Connection controls and activity log (width c√¢n ƒë·ªëi v·ªõi left)
        right_frame = ctk.CTkFrame(main_frame, width=400)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        right_frame.pack_propagate(False)
        
        self.create_log_panel(right_frame)
    
    def create_employee_panel(self, parent):
        """T·∫°o panel danh s√°ch nh√¢n vi√™n"""
        # Employee list frame
        emp_frame = ctk.CTkFrame(parent)
        emp_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Title and refresh button
        title_frame = ctk.CTkFrame(emp_frame)
        title_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        title_label = ctk.CTkLabel(title_frame, text="üë• Danh s√°ch nh√¢n vi√™n", 
                                 font=ctk.CTkFont(size=16, weight="bold"))
        title_label.pack(side="left")
        
        # Add refresh employee list button with icon
        self.refresh_employee_btn = ctk.CTkButton(
            title_frame, 
            text="üîÑ L√†m m·ªõi", 
            command=self.refresh_employee_list_safe,
            width=100
        )
        self.refresh_employee_btn.pack(side="right", padx=(10, 0))
        
        # Search box
        search_frame = ctk.CTkFrame(emp_frame)
        search_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(search_frame, text="üîç T√¨m ki·∫øm:").pack(side="left", padx=(10, 5), pady=10)
        
        self.search_var = ctk.StringVar()
        self.search_var.trace("w", self.on_search_changed)
        search_entry = ctk.CTkEntry(search_frame, textvariable=self.search_var, width=220)
        search_entry.pack(side="left", padx=(0, 10), pady=10)
        
        # Employee list
        list_frame = ctk.CTkFrame(emp_frame)
        list_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # Treeview for employees
        columns = ("employee", "name", "custom_group", "device_id")
        self.employee_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=20)
        
        # Configure columns
        self.employee_tree.heading("employee", text="M√£ NV")
        self.employee_tree.heading("name", text="T√™n nh√¢n vi√™n")
        self.employee_tree.heading("custom_group", text="Nh√≥m")
        self.employee_tree.heading("device_id", text="ID CC")
        
        self.employee_tree.column("employee", width=80)
        self.employee_tree.column("name", width=160)
        self.employee_tree.column("custom_group", width=90)
        self.employee_tree.column("device_id", width=60)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.employee_tree.yview)
        self.employee_tree.configure(yscrollcommand=scrollbar.set)
        
        self.employee_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind selection event
        self.employee_tree.bind("<<TreeviewSelect>>", self.on_employee_select)
    
    def create_control_panel(self, parent):
        """T·∫°o panel ƒëi·ªÅu khi·ªÉn v·ªõi color-coded finger buttons"""
        # Finger selection section
        finger_frame = ctk.CTkFrame(parent)
        finger_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(finger_frame, text="üëÜ Ch·ªçn ng√≥n tay", 
                   font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 5))
        
        # Finger buttons arranged in left/right hands
        hands_frame = ctk.CTkFrame(finger_frame)
        hands_frame.pack(padx=10, pady=(0, 10))
        
        # Left hand column
        left_hand_frame = ctk.CTkFrame(hands_frame)
        left_hand_frame.pack(side="left", padx=(10, 5), pady=10)
        
        ctk.CTkLabel(left_hand_frame, text="üëà Tay tr√°i", 
                   font=ctk.CTkFont(size=12, weight="bold")).pack(pady=(5, 10))
        
        # Right hand column
        right_hand_frame = ctk.CTkFrame(hands_frame)
        right_hand_frame.pack(side="right", padx=(5, 10), pady=10)
        
        ctk.CTkLabel(right_hand_frame, text="üëâ Tay ph·∫£i", 
                   font=ctk.CTkFont(size=12, weight="bold")).pack(pady=(5, 10))
        
        self.finger_buttons = {}
        
        # Left hand fingers (0-4)
        for i in range(5):
            finger_name = FINGER_MAPPING[i].replace(" tr√°i", "")
            btn = ctk.CTkButton(
                left_hand_frame, 
                text=f"{i}: {finger_name}", 
                width=130,
                command=lambda idx=i: self.select_finger(idx)
            )
            btn.pack(pady=2, padx=5)
            # Th√™m binding cho double click
            btn.bind('<Double-Button-1>', lambda e, idx=i: self.on_finger_button_double_click(idx))
            self.finger_buttons[i] = btn
        
        # Right hand fingers (5-9)
        for i in range(5, 10):
            finger_name = FINGER_MAPPING[i].replace(" ph·∫£i", "")
            btn = ctk.CTkButton(
                right_hand_frame, 
                text=f"{i}: {finger_name}", 
                width=130,
                command=lambda idx=i: self.select_finger(idx)
            )
            btn.pack(pady=2, padx=5)
            # Th√™m binding cho double click
            btn.bind('<Double-Button-1>', lambda e, idx=i: self.on_finger_button_double_click(idx))
            self.finger_buttons[i] = btn
        
        # Action buttons with icons - horizontal layout
        action_frame = ctk.CTkFrame(parent)
        action_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        ctk.CTkLabel(action_frame, text="‚ö° Thao t√°c", 
                   font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 5))
        
        # Button container for horizontal layout
        button_container = ctk.CTkFrame(action_frame)
        button_container.pack(pady=5, padx=10)
        
        self.scan_btn = ctk.CTkButton(button_container, text="üëÜ Th√™m v√¢n tay", 
                                    command=self.main_app.scan_fingerprint,
                                    width=130)
        self.scan_btn.pack(side="left", padx=(10, 5), pady=5)
        
        self.save_btn = ctk.CTkButton(button_container, text="üíæ L∆∞u", 
                                    command=self.main_app.save_fingerprints,
                                    width=130)
        self.save_btn.pack(side="right", padx=(5, 10), pady=5)
        
        # Enhanced sync section v·ªõi device status display
        self.create_device_sync_section(parent)
    
    def create_device_sync_section(self, parent):
        """T·∫°o section ƒë·ªìng b·ªô m√°y ch·∫•m c√¥ng v·ªõi device status"""
        sync_frame = ctk.CTkFrame(parent)
        sync_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        ctk.CTkLabel(sync_frame, text="üîÑ ƒê·ªìng b·ªô m√°y ch·∫•m c√¥ng", 
                   font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 5))
        
        # Device connection button ·ªü tr√™n
        self.device_connection_btn = ctk.CTkButton(
            sync_frame,
            text="üñ•Ô∏è K·∫øt n·ªëi m√°y ch·∫•m c√¥ng",
            command=self.connect_attendance_devices,
            width=250
        )
        self.device_connection_btn.pack(pady=(5, 10))
        
        # Sync button ngay ph√≠a d∆∞·ªõi
        self.sync_btn = ctk.CTkButton(sync_frame, text="üì§ ƒê·ªìng b·ªô", 
                                    command=self.sync_to_selected_devices,
                                    width=250)
        self.sync_btn.pack(pady=(0, 10))
        
        # Device selection v·ªõi enhanced status display
        device_selection_frame = ctk.CTkScrollableFrame(sync_frame, height=120)
        device_selection_frame.pack(fill="x", padx=10, pady=5)
        
        # Select all checkbox
        self.select_all_var = ctk.BooleanVar()
        select_all_cb = ctk.CTkCheckBox(
            device_selection_frame, 
            text="‚úÖ Ch·ªçn t·∫•t c·∫£ thi·∫øt b·ªã",
            variable=self.select_all_var,
            command=self.toggle_all_devices
        )
        select_all_cb.pack(anchor="w", pady=2)
        
        # Container cho device checkboxes
        self.device_checkboxes_frame = ctk.CTkFrame(device_selection_frame)
        self.device_checkboxes_frame.pack(fill="x", pady=5)
        
        # Initialize device checkboxes
        self.device_vars = {}
        self.device_checkboxes = {}
        self.update_device_sync_section()
        
        # Sync button
        self.sync_btn = ctk.CTkButton(sync_frame, text="üì§ ƒê·ªìng b·ªô", 
                                    command=self.sync_to_selected_devices)
        self.sync_btn.pack(pady=5, padx=10)
    
    def update_device_sync_section(self):
        """C·∫≠p nh·∫≠t section ƒë·ªìng b·ªô v·ªõi device status chi ti·∫øt"""
        # Clear existing checkboxes
        for widget in self.device_checkboxes_frame.winfo_children():
            widget.destroy()
        
        self.device_vars = {}
        self.device_checkboxes = {}
        
        # Create checkboxes for each device v·ªõi status display
        for device in self.main_app.attendance_devices:
            device_id = device.get('id')
            device_name = device.get('device_name', device.get('name', f'Device_{device_id}'))
            ip_address = device.get('ip', device.get('ip_address', 'Unknown'))
            
            # Get device status
            status = self.main_app.device_status.get(device_id, 'unknown')
            if status == 'connected':
                status_icon = "üü¢"
                status_text = "K·∫øt n·ªëi"
            elif status == 'disconnected':
                status_icon = "üî¥"
                status_text = "Ng·∫Øt k·∫øt n·ªëi"
            elif status == 'error':
                status_icon = "üü°"
                status_text = "L·ªói"
            else:
                status_icon = "‚ö™"
                status_text = "Ch∆∞a ki·ªÉm tra"
            
            # Device info frame
            device_frame = ctk.CTkFrame(self.device_checkboxes_frame)
            device_frame.pack(fill="x", pady=2, padx=5)
            
            # Checkbox
            var = ctk.BooleanVar()
            checkbox = ctk.CTkCheckBox(
                device_frame,
                text="",
                variable=var,
                width=20
            )
            checkbox.pack(side="left", padx=(5, 10), pady=5)
            
            # Device info label v·ªõi format: {T√™n m√°y} - {ip_address} - {icon status}
            info_text = f"{device_name} - {ip_address} - {status_icon} {status_text}"
            info_label = ctk.CTkLabel(
                device_frame,
                text=info_text,
                font=ctk.CTkFont(size=11),
                anchor="w"
            )
            info_label.pack(side="left", fill="x", expand=True, padx=(0, 5), pady=5)
            
            self.device_vars[device_id] = var
            self.device_checkboxes[device_id] = checkbox
    
    def create_log_panel(self, parent):
        """T·∫°o panel k·∫øt n·ªëi v√† nh·∫≠t k√Ω v·ªõi width c√¢n ƒë·ªëi"""
        # Connection controls at top
        connection_frame = ctk.CTkFrame(parent)
        connection_frame.pack(fill="x", padx=5, pady=(5, 0))
        
        ctk.CTkLabel(connection_frame, text="üîå K·∫øt n·ªëi thi·∫øt b·ªã:", 
                   font=ctk.CTkFont(size=14, weight="bold")).pack(side="top", pady=(10, 5))
        
        # Connection buttons row
        button_row1 = ctk.CTkFrame(connection_frame)
        button_row1.pack(fill="x", padx=5, pady=5)
        
        # Scanner connection button
        self.scanner_btn = ctk.CTkButton(
            button_row1, 
            text="üì∑ Scanner", 
            command=self.manual_connect_scanner,
            width=120,
            fg_color="red"
        )
        self.scanner_btn.pack(side="left", padx=5)
        
        # ERPNext connection button
        self.erpnext_btn = ctk.CTkButton(
            button_row1, 
            text="üåê ERPNext", 
            command=self.manual_connect_erpnext,
            width=120,
            fg_color="red"
        )
        self.erpnext_btn.pack(side="right", padx=5)
        
        # Activity log section
        self.log_frame = ctk.CTkFrame(parent)
        self.log_frame.pack(fill="both", expand=True, padx=5, pady=(5, 5))
        
        ctk.CTkLabel(self.log_frame, text="üìù Nh·∫≠t k√Ω ho·∫°t ƒë·ªông", 
                   font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 5))
        
        # Create log text widget with scrollbar
        self.log_text = tk.Text(self.log_frame, height=15, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(self.log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        # Pack widgets
        self.log_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Setup log display v·ªõi color highlighting
        self.setup_log_display()
    
    def setup_log_display(self):
        """Thi·∫øt l·∫≠p hi·ªÉn th·ªã log v·ªõi m√†u s·∫Øc"""
        class ColoredGUILogHandler(logging.Handler):
            def __init__(self, text_widget, main_app):
                super().__init__()
                self.text_widget = text_widget
                self.main_app = main_app
                
                # ƒê·ªãnh nghƒ©a m√†u s·∫Øc cho c√°c level
                self.colors = {
                    'DEBUG': '#808080',    # Gray
                    'INFO': '#0000FF',     # Blue
                    'WARNING': '#FFA500',  # Orange
                    'ERROR': '#FF0000',    # Red
                    'CRITICAL': '#800000'  # Dark Red
                }
                
                # ƒê·ªãnh nghƒ©a icon cho c√°c level
                self.icons = {
                    'DEBUG': 'üîç',
                    'INFO': '‚ÑπÔ∏è',
                    'WARNING': '‚ö†Ô∏è',
                    'ERROR': '‚ùå',
                    'CRITICAL': 'üí•'
                }
            
            def emit(self, record):
                msg = self.format(record)
                self.append_colored_log(msg, record.levelname)
            
            def append_colored_log(self, message, level):
                # Th√™m icon v√† m√†u s·∫Øc d·ª±a tr√™n level
                icon = self.icons.get(level, '')
                color = self.colors.get(level, '#000000')
                
                # T·∫°o tag cho ƒëo·∫°n text n√†y
                tag = f"log_{level.lower()}"
                
                # C·∫•u h√¨nh tag v·ªõi m√†u s·∫Øc
                self.text_widget.tag_configure(tag, foreground=color)
                
                # Th√™m text v·ªõi tag
                self.text_widget.insert('end', f"{icon} {message}\n", tag)
                
                # T·ª± ƒë·ªông cu·ªôn xu·ªëng
                self.text_widget.see('end')
                
                # Gi·ªõi h·∫°n s·ªë d√≤ng log
                max_lines = 1000
                if int(self.text_widget.index('end-1c').split('.')[0]) > max_lines:
                    self.text_widget.delete('1.0', '2.0')
        
        # Th√™m handler
        handler = ColoredGUILogHandler(self.log_text, self.main_app)
        handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
        logger.addHandler(handler)
    
    def manual_connect_scanner(self):
        """K·∫øt n·ªëi scanner th·ªß c√¥ng"""
        if self.main_app.scanner_connected:
            messagebox.showinfo("Th√¥ng b√°o", "Scanner ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi!")
            return
        
        self.scanner_btn.configure(text="ƒêang k·∫øt n·ªëi...", state="disabled")
        
        def connect_thread():
            try:
                success = self.main_app.connect_scanner()
                
                self.main_app.root.after(0, lambda: [
                    self.scanner_btn.configure(text="üì∑ Scanner", state="normal"),
                    self.update_connection_status(success, self.main_app.erpnext_connected),
                    messagebox.showinfo("Th√†nh c√¥ng" if success else "L·ªói", 
                                      "ƒê√£ k·∫øt n·ªëi Scanner th√†nh c√¥ng!" if success else "Kh√¥ng th·ªÉ k·∫øt n·ªëi Scanner!")
                ])
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói k·∫øt n·ªëi scanner: {str(e)}")
                self.main_app.root.after(0, lambda: [
                    self.scanner_btn.configure(text="üì∑ Scanner", state="normal"),
                    messagebox.showerror("L·ªói", f"L·ªói k·∫øt n·ªëi Scanner: {str(e)}")
                ])
        
        threading.Thread(target=connect_thread, daemon=True).start()
    
    def manual_connect_erpnext(self):
        """K·∫øt n·ªëi ERPNext th·ªß c√¥ng"""
        if self.main_app.erpnext_connected:
            messagebox.showinfo("Th√¥ng b√°o", "ERPNext ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi!")
            return
        
        self.erpnext_btn.configure(text="ƒêang k·∫øt n·ªëi...", state="disabled")
        
        def connect_thread():
            try:
                success = self.main_app.connect_erpnext()
                
                self.main_app.root.after(0, lambda: [
                    self.erpnext_btn.configure(text="üåê ERPNext", state="normal"),
                    self.update_connection_status(self.main_app.scanner_connected, success),
                    self.update_employee_list() if success else None,
                    messagebox.showinfo("Th√†nh c√¥ng" if success else "L·ªói", 
                                      "ƒê√£ k·∫øt n·ªëi ERPNext th√†nh c√¥ng!" if success else "Kh√¥ng th·ªÉ k·∫øt n·ªëi ERPNext!")
                ])
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói k·∫øt n·ªëi ERPNext: {str(e)}")
                self.main_app.root.after(0, lambda: [
                    self.erpnext_btn.configure(text="üåê ERPNext", state="normal"),
                    messagebox.showerror("L·ªói", f"L·ªói k·∫øt n·ªëi ERPNext: {str(e)}")
                ])
        
        threading.Thread(target=connect_thread, daemon=True).start()
    
    def connect_attendance_devices(self):
        """K·∫øt n·ªëi m√°y ch·∫•m c√¥ng v·ªõi non-blocking approach"""
        self.device_connection_btn.configure(text="üîÑ ƒêang k·∫øt n·ªëi...", state="disabled")
        
        def connect_devices_thread():
            try:
                # G·ªçi h√†m load devices t·ª´ main app
                self.main_app.load_devices_from_erpnext_and_check()
                
                # Update UI sau khi load xong
                self.main_app.root.after(0, lambda: [
                    self.device_connection_btn.configure(text="üñ•Ô∏è K·∫øt n·ªëi m√°y ch·∫•m c√¥ng", state="normal"),
                    messagebox.showinfo("Ho√†n th√†nh", "ƒê√£ t·∫£i danh s√°ch m√°y ch·∫•m c√¥ng!")
                ])
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói k·∫øt n·ªëi m√°y ch·∫•m c√¥ng: {str(e)}")
                self.main_app.root.after(0, lambda: [
                    self.device_connection_btn.configure(text="üñ•Ô∏è K·∫øt n·ªëi m√°y ch·∫•m c√¥ng", state="normal"),
                    messagebox.showerror("L·ªói", f"L·ªói k·∫øt n·ªëi m√°y ch·∫•m c√¥ng: {str(e)}")
                ])
        
        threading.Thread(target=connect_devices_thread, daemon=True).start()
    
    def toggle_all_devices(self):
        """Toggle t·∫•t c·∫£ device checkboxes"""
        select_all = self.select_all_var.get()
        for var in self.device_vars.values():
            var.set(select_all)
    
    def sync_to_selected_devices(self):
        """ƒê·ªìng b·ªô ƒë·∫øn c√°c thi·∫øt b·ªã ƒë∆∞·ª£c ch·ªçn"""
        # L·∫•y danh s√°ch devices ƒë∆∞·ª£c ch·ªçn
        selected_devices = []
        for device_id, var in self.device_vars.items():
            if var.get():
                # Find device by id
                for device in self.main_app.attendance_devices:
                    if device.get('id') == device_id:
                        selected_devices.append(device)
                        break
        
        if not selected_devices:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt thi·∫øt b·ªã ƒë·ªÉ ƒë·ªìng b·ªô!")
            return
        
        # Hi·ªÉn th·ªã th√¥ng tin confirm
        device_names = [d.get('device_name', d.get('name', 'Unknown')) for d in selected_devices]
        confirm_msg = f"B·∫°n c√≥ mu·ªën ƒë·ªìng b·ªô d·ªØ li·ªáu v√¢n tay ƒë·∫øn {len(selected_devices)} thi·∫øt b·ªã:\n"
        confirm_msg += "\n".join([f"‚Ä¢ {name}" for name in device_names])
        
        if messagebox.askyesno("X√°c nh·∫≠n ƒë·ªìng b·ªô", confirm_msg):
            logger.info(f"üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô ƒë·∫øn {len(selected_devices)} thi·∫øt b·ªã")
            self.main_app.sync_to_devices(selected_devices)
    
    def refresh_employee_list_safe(self):
        """L√†m m·ªõi danh s√°ch nh√¢n vi√™n v·ªõi thread safety"""
        if not self.main_app.erpnext_connected:
            messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a k·∫øt n·ªëi ERPNext!")
            return
        
        # Disable button to prevent multiple clicks
        self.refresh_employee_btn.configure(text="‚è≥ ƒêang t·∫£i...", state="disabled")
        
        def refresh_thread():
            try:
                # Reload employees from ERPNext
                new_employees = self.main_app.erpnext_api.get_all_employees()
                
                # Update in main thread
                def update_ui():
                    try:
                        self.main_app.employees = new_employees
                        self.update_employee_list()
                        self.refresh_employee_btn.configure(text="üîÑ L√†m m·ªõi", state="normal")
                        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t {len(new_employees)} nh√¢n vi√™n!")
                        logger.info(f"‚úÖ ƒê√£ l√†m m·ªõi danh s√°ch {len(new_employees)} nh√¢n vi√™n")
                    except Exception as ui_error:
                        logger.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t UI: {str(ui_error)}")
                        self.refresh_employee_btn.configure(text="üîÑ L√†m m·ªõi", state="normal")
                
                # Schedule UI update safely
                if self.main_app.root and self.main_app.root.winfo_exists():
                    self.main_app.root.after(0, update_ui)
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói l√†m m·ªõi danh s√°ch nh√¢n vi√™n: {str(e)}")
                
                def handle_error():
                    try:
                        self.refresh_employee_btn.configure(text="üîÑ L√†m m·ªõi", state="normal")
                        messagebox.showerror("L·ªói", f"L·ªói l√†m m·ªõi danh s√°ch: {str(e)}")
                    except:
                        pass
                
                if self.main_app.root and self.main_app.root.winfo_exists():
                    self.main_app.root.after(0, handle_error)
        
        # Use daemon thread to prevent hanging
        threading.Thread(target=refresh_thread, daemon=True).start()
    
    def on_search_changed(self, *args):
        """X·ª≠ l√Ω thay ƒë·ªïi t√¨m ki·∫øm"""
        search_term = self.search_var.get().lower()
        self.filter_employees(search_term)
    
    def filter_employees(self, search_term: str):
        """L·ªçc danh s√°ch nh√¢n vi√™n"""
        for item in self.employee_tree.get_children():
            self.employee_tree.delete(item)
        
        for emp in self.main_app.employees:
            if (search_term in emp.get('employee', '').lower() or 
                search_term in emp.get('employee_name', '').lower()):
                
                self.employee_tree.insert("", "end", values=(
                    emp.get('employee', ''),
                    emp.get('employee_name', ''),
                    emp.get('custom_group', ''),
                    emp.get('attendance_device_id', '')
                ))
    
    def on_employee_select(self, event):
        """X·ª≠ l√Ω ch·ªçn nh√¢n vi√™n v√† c·∫≠p nh·∫≠t m√†u finger buttons"""
        selection = self.employee_tree.selection()
        if selection:
            item = self.employee_tree.item(selection[0])
            employee_id = item['values'][0]
            
            selected_emp = None
            for emp in self.main_app.employees:
                if emp.get('employee') == employee_id:
                    selected_emp = emp
                    break
            
            if selected_emp:
                self.main_app.selected_employee = selected_emp
                self.update_finger_button_colors()
                logger.info(f"üìã ƒê√£ ch·ªçn nh√¢n vi√™n: {selected_emp.get('employee_name', '')} ({employee_id})")
    
    def select_finger(self, finger_index: int):
        """Ch·ªçn ng√≥n tay v√† c·∫≠p nh·∫≠t m√†u buttons"""
        if not self.main_app.selected_employee:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nh√¢n vi√™n tr∆∞·ªõc!")
            return
        
        self.main_app.set_selected_finger(self.main_app.selected_employee, finger_index)
        self.update_finger_button_colors()
        
        finger_name = FINGER_MAPPING.get(finger_index, f"Ng√≥n {finger_index}")
        logger.info(f"üëÜ ƒê√£ ch·ªçn ng√≥n tay: {finger_name}")
    
    def update_finger_button_colors(self):
        """C·∫≠p nh·∫≠t m√†u s·∫Øc cho finger buttons theo quy t·∫Øc enhanced"""
        if not self.main_app.selected_employee:
            # Reset all buttons to default
            for btn in self.finger_buttons.values():
                btn.configure(fg_color=("gray75", "gray25"))
            return
        
        employee_id = self.main_app.selected_employee.get('employee')
        fingerprint_data = self.main_app.current_fingerprints.get(employee_id, {})
        existing_fingers = {fp['finger_index'] for fp in fingerprint_data.get('fingerprints', [])}
        
        for finger_index, btn in self.finger_buttons.items():
            if finger_index == self.main_app.selected_finger_index:
                # Currently selected finger - blue v·ªõi enhanced color
                btn.configure(fg_color=("#1f538d", "#14375e"))
            elif finger_index in existing_fingers:
                # Has fingerprint data - green v·ªõi enhanced color
                btn.configure(fg_color=("#2d7d32", "#1b5e20"))
            else:
                # No data, not selected - default gray
                btn.configure(fg_color=("gray75", "gray25"))
    
    def update_employee_list(self):
        """C·∫≠p nh·∫≠t danh s√°ch nh√¢n vi√™n"""
        for item in self.employee_tree.get_children():
            self.employee_tree.delete(item)
        
        for emp in self.main_app.employees:
            self.employee_tree.insert("", "end", values=(
                emp.get('employee', ''),
                emp.get('employee_name', ''),
                emp.get('custom_group', ''),
                emp.get('attendance_device_id', '')
            ))
        
        logger.info(f"üìã ƒê√£ c·∫≠p nh·∫≠t danh s√°ch {len(self.main_app.employees)} nh√¢n vi√™n")
    
    def update_connection_status(self, scanner_connected: bool, erpnext_connected: bool):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi tr√™n buttons"""
        # Update scanner button
        if scanner_connected:
            self.scanner_btn.configure(text="üì∑ Scanner", fg_color="green")
        else:
            self.scanner_btn.configure(text="üì∑ Scanner", fg_color="red")
            
        # Update ERPNext button
        if erpnext_connected:
            self.erpnext_btn.configure(text="üåê ERPNext", fg_color="green")
        else:
            self.erpnext_btn.configure(text="üåê ERPNext", fg_color="red")
        
        # Log status updates v·ªõi enhanced messaging
        if scanner_connected and erpnext_connected:
            logger.info("‚úÖ T·∫•t c·∫£ k·∫øt n·ªëi ƒë√£ s·∫µn s√†ng - C√≥ th·ªÉ th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng")
        elif scanner_connected:
            logger.info("‚ö†Ô∏è Ch·ªâ Scanner ƒë∆∞·ª£c k·∫øt n·ªëi - C√≥ th·ªÉ qu√©t v√¢n tay nh∆∞ng kh√¥ng th·ªÉ ƒë·ªìng b·ªô v·ªõi ERPNext")
        elif erpnext_connected:
            logger.info("‚ö†Ô∏è Ch·ªâ ERPNext ƒë∆∞·ª£c k·∫øt n·ªëi - C√≥ th·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu nh∆∞ng kh√¥ng th·ªÉ qu√©t v√¢n tay")
        else:
            logger.warning("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi n√†o - Vui l√≤ng k·∫øt n·ªëi thi·∫øt b·ªã ƒë·ªÉ s·ª≠ d·ª•ng")
    
    def update_fingerprint_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã v√¢n tay (placeholder for future enhancement)"""
        # Update finger button colors when fingerprints change
        self.update_finger_button_colors()

    def on_finger_button_double_click(self, finger_index):
        """X·ª≠ l√Ω s·ª± ki·ªán double click v√†o n√∫t v√¢n tay"""
        if not self.main_app.selected_employee:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nh√¢n vi√™n tr∆∞·ªõc!")
            return
            
        employee_id = self.main_app.selected_employee['employee']
        if employee_id not in self.main_app.current_fingerprints:
            return
            
        # X√°c nh·∫≠n x√≥a
        finger_name = FINGER_MAPPING.get(finger_index, f"Ng√≥n {finger_index}")
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a v√¢n tay {finger_name}?"):
            # X√≥a v√¢n tay
            fingerprints = self.main_app.current_fingerprints[employee_id]['fingerprints']
            self.main_app.current_fingerprints[employee_id]['fingerprints'] = [
                fp for fp in fingerprints if fp['finger_index'] != finger_index
            ]
            
            # C·∫≠p nh·∫≠t UI
            self.update_finger_button_colors()
            logger.info(f"‚úÖ ƒê√£ x√≥a v√¢n tay {finger_name} c·ªßa {employee_id}")