# main.py
"""
·ª®ng d·ª•ng qu·∫£n l√Ω ƒëƒÉng k√Ω v√¢n tay cho nh√¢n vi√™n ERPNext HRMS
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, ttk
import logging
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import threading
import queue
from PIL import Image
import sys
import base64 # Import base64 for encoding/decoding

# Import c√°c modules
from config import *
from fingerprint_scanner import FingerprintScanner
from erpnext_api import ERPNextAPI
from attendance_sync import AttendanceDeviceSync

# Thi·∫øt l·∫≠p logging
def setup_logging():
    """Thi·∫øt l·∫≠p logging cho ·ª©ng d·ª•ng"""
    # T·∫°o th∆∞ m·ª•c log n·∫øu ch∆∞a c√≥
    if not os.path.exists('log'):
        os.makedirs('log')
    
    # T·∫°o t√™n file log theo ng√†y
    log_filename = f"log/fingerprint_app_{datetime.now().strftime('%Y%m%d')}.log"
    
    # C·∫•u h√¨nh logging
    logging.basicConfig(
        level=getattr(logging, LOG_CONFIG['log_level']),\
        format=LOG_CONFIG['log_format'],
        datefmt=LOG_CONFIG['date_format'],
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    return logging.getLogger(__name__)

# Setup logging
logger = setup_logging()

# Set theme
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class LogHandler(logging.Handler):
    """Custom log handler ƒë·ªÉ hi·ªÉn th·ªã log trong GUI"""
    def __init__(self, log_widget):
        super().__init__()
        self.log_widget = log_widget
        
    def emit(self, record):
        msg = self.format(record)
        
        # Th√™m icon v√† m√†u theo log level
        if record.levelname == 'ERROR':
            icon = "‚ùå"
            tag = "error"
        elif record.levelname == 'WARNING':
            icon = "‚ö†Ô∏è"
            tag = "warning"
        elif record.levelname == 'INFO':
            if "‚úÖ" in msg:
                icon = ""
                tag = "success"
            elif "üîç" in msg or "üì∑" in msg:
                icon = ""
                tag = "info"
            else:
                icon = "‚ÑπÔ∏è"
                tag = "info"
        else:
            icon = "üìù"
            tag = "debug"
        
        # Format message v·ªõi timestamp
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_msg = f"[{timestamp}] {icon} {msg}\n"
        
        # Update UI trong main thread
        self.log_widget.after(0, self._update_log, formatted_msg, tag)
    
    def _update_log(self, msg, tag):
        self.log_widget.configure(state='normal')
        self.log_widget.insert('end', msg, tag)
        self.log_widget.configure(state='disabled')
        self.log_widget.see('end')


class FingerprintApp(ctk.CTk):
    """L·ªõp ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self):
        super().__init__()
        
        # Kh·ªüi t·∫°o c√°c bi·∫øn
        self.scanner = FingerprintScanner()
        self.erpnext = ERPNextAPI()
        self.sync_manager = AttendanceDeviceSync(self.erpnext)
        
        # State variables
        self.current_employee = None
        self.current_fingerprints = {} # Stores fingerprints for the currently selected employee
        self.selected_finger = 0
        self.employees_list = [] # Full list of employees from ERPNext
        self.is_scanning = False
        
        # Change tracking
        self.has_unsaved_changes = False
        self.original_fingerprints = {} # Store original state for comparison
        
        # Queue cho background tasks
        self.task_queue = queue.Queue()
        
        # Setup GUI
        self.setup_window()
        self.create_widgets()
        
        # Bind events
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Start background worker
        self.start_background_worker()
        
        logger.info("üöÄ ·ª®ng d·ª•ng ƒë√£ kh·ªüi ƒë·ªông")
        
    def setup_window(self):
        """C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh"""
        self.title(UI_CONFIG['app_title'])
        self.geometry(f"{UI_CONFIG['window_width']}x{UI_CONFIG['window_height']}")
        
        # Center window
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (UI_CONFIG['window_width'] // 2)
        y = (self.winfo_screenheight() // 2) - (UI_CONFIG['window_height'] // 2)
        self.geometry(f"+{x}+{y}")
        
        # Set icon n·∫øu c√≥
        try:
            if os.path.exists('photos/logo.png'):
                logo_img = Image.open('photos/logo.png')
                logo_img = logo_img.resize((120, 40), Image.Resampling.LANCZOS)
                logo_ctk = ctk.CTkImage(logo_img, size=(120, 40))
                # Fix: logo_label needs to be packed into logo_frame, which is defined in create_top_section
                # This block is called before create_top_section, so logo_frame doesn't exist yet.
                # It's better to move logo loading to create_top_section.
                pass 
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫£i logo (trong setup_window): {e}")
            pass
    
    def create_widgets(self):
        """T·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        # Main container
        self.main_container = ctk.CTkFrame(self)
        self.main_container.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Create sections
        self.create_top_section()
        self.create_middle_section()
        
    def create_top_section(self):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã tr·∫°ng th√°i"""
        self.top_frame = ctk.CTkFrame(self.main_container, height=60)
        self.top_frame.pack(fill='x', padx=5, pady=(5, 10))
        self.top_frame.pack_propagate(False)
        
        # Logo
        logo_frame = ctk.CTkFrame(self.top_frame)
        logo_frame.pack(side='left', padx=10)
        
        try:
            if os.path.exists('photos/logo.png'):
                logo_img = Image.open('photos/logo.png')
                logo_img = logo_img.resize((120, 30), Image.Resampling.LANCZOS)
                logo_ctk = ctk.CTkImage(logo_img, size=(120, 30))
                logo_label = ctk.CTkLabel(logo_frame, image=logo_ctk, text="")
                logo_label.pack()
            else:
                logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file logo.png trong th∆∞ m·ª•c photos.")
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫£i logo: {e}")
            pass
        
        # Status indicators
        status_frame = ctk.CTkFrame(self.top_frame)
        status_frame.pack(side='left', fill='x', expand=True, padx=20)
        
        # ERPNext status
        self.erpnext_status = ctk.CTkLabel(
            status_frame,
            text="ERPNext: ‚ùå Ch∆∞a k·∫øt n·ªëi",
            font=("Arial", 14)
        )
        self.erpnext_status.pack(side='left', padx=20)
        
        # Scanner status
        self.scanner_status = ctk.CTkLabel(
            status_frame,
            text="Scanner: ‚ùå Ch∆∞a k·∫øt n·ªëi",
            font=("Arial", 14)
        )
        self.scanner_status.pack(side='left', padx=20)
        
        # Progress
        self.progress_label = ctk.CTkLabel(
            status_frame,
            text="",
            font=("Arial", 14)
        )
        self.progress_label.pack(side='left', padx=20)
        
    def create_middle_section(self):
        """T·∫°o ph·∫ßn ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
        middle_frame = ctk.CTkFrame(self.main_container)
        middle_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Left panel - Employee list
        self.create_employee_panel(middle_frame)
        
        # Center panel - Controls
        self.create_control_panel(middle_frame)
        
        # Right panel - Fingerprint & Log
        self.create_right_panel(middle_frame)
        
    def create_employee_panel(self, parent):
        """T·∫°o panel danh s√°ch nh√¢n vi√™n"""
        left_frame = ctk.CTkFrame(parent, width=350)
        left_frame.pack(side='left', fill='both', expand=False, padx=(0, 5))
        left_frame.pack_propagate(False)
        
        # Title
        title = ctk.CTkLabel(
            left_frame,
            text="üìã DANH S√ÅCH NH√ÇN VI√äN",
            font=("Arial", 16, "bold")
        )
        title.pack(pady=10)
        
        # Search box
        search_frame = ctk.CTkFrame(left_frame)
        search_frame.pack(fill='x', padx=10, pady=5)
        
        self.search_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="üîç T√¨m ki·∫øm nh√¢n vi√™n..."
        )
        self.search_entry.pack(fill='x', padx=5, pady=5)
        self.search_entry.bind('<KeyRelease>', self.on_search)
        
        # Employee listbox with scrollbar
        list_frame = ctk.CTkFrame(left_frame)
        list_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Scrollbar
        scrollbar = ctk.CTkScrollbar(list_frame)
        scrollbar.pack(side='right', fill='y')
        
        # Listbox
        self.employee_listbox = tk.Listbox(
            list_frame,
            yscrollcommand=scrollbar.set,
            font=("Consolas", 11),
            bg="#212121",
            fg="white",
            selectbackground="#1f538d",
            selectforeground="white",
            activestyle='none'
        )
        self.employee_listbox.pack(side='left', fill='both', expand=True)
        scrollbar.configure(command=self.employee_listbox.yview)
        
        # Bind selection event
        self.employee_listbox.bind('<<ListboxSelect>>', self.on_employee_select)
        
        # Refresh button
        refresh_btn = ctk.CTkButton(
            left_frame,
            text="üîÑ L√†m m·ªõi danh s√°ch",
            command=self.refresh_employee_list
        )
        refresh_btn.pack(pady=10)
        
    def create_control_panel(self, parent):
        """T·∫°o panel ƒëi·ªÅu khi·ªÉn"""
        center_frame = ctk.CTkFrame(parent, width=400)
        center_frame.pack(side='left', fill='both', expand=True, padx=5)
        
        # Title
        title = ctk.CTkLabel(
            center_frame,
            text="üéõÔ∏è ƒêI·ªÄU KHI·ªÇN",
            font=("Arial", 16, "bold")
        )
        title.pack(pady=10)
        
        # Connection controls
        conn_frame = ctk.CTkFrame(center_frame)
        conn_frame.pack(fill='x', padx=20, pady=10)
        
        ctk.CTkLabel(
            conn_frame,
            text="K·∫øt n·ªëi h·ªá th·ªëng:",
            font=("Arial", 14)
        ).pack(pady=5)
        
        btn_frame1 = ctk.CTkFrame(conn_frame)
        btn_frame1.pack(pady=5)
        
        self.connect_scanner_btn = ctk.CTkButton(
            btn_frame1,
            text="üîå K·∫øt n·ªëi Scanner",
            command=self.connect_scanner,
            width=180
        )
        self.connect_scanner_btn.pack(side='left', padx=5)
        
        self.connect_erpnext_btn = ctk.CTkButton(
            btn_frame1,
            text="üîå K·∫øt n·ªëi ERPNext",
            command=self.connect_erpnext,
            width=180
        )
        self.connect_erpnext_btn.pack(side='left', padx=5)
        
        # Separator
        ctk.CTkLabel(center_frame, text="", height=1).pack(fill='x', padx=20, pady=5)
        
        # Fingerprint controls
        fp_frame = ctk.CTkFrame(center_frame)
        fp_frame.pack(fill='x', padx=20, pady=10)
        
        ctk.CTkLabel(
            fp_frame,
            text="Qu·∫£n l√Ω v√¢n tay:",
            font=("Arial", 14)
        ).pack(pady=5)
        
        # Current employee info
        self.current_emp_label = ctk.CTkLabel(
            fp_frame,
            text="Ch∆∞a ch·ªçn nh√¢n vi√™n",
            font=("Arial", 12),
            text_color="gray"
        )
        self.current_emp_label.pack(pady=5)
        
        btn_frame2 = ctk.CTkFrame(fp_frame)
        btn_frame2.pack(pady=5)
        
        self.add_fingerprint_btn = ctk.CTkButton(
            btn_frame2,
            text="‚ûï Th√™m v√¢n tay",
            command=self.add_fingerprint,
            width=180,
            state='disabled'
        )
        self.add_fingerprint_btn.pack(side='left', padx=5)
        
        self.delete_fingerprint_btn = ctk.CTkButton(
            btn_frame2,
            text="üóëÔ∏è X√≥a v√¢n tay",
            command=self.delete_fingerprint,
            width=180,
            state='disabled'
        )
        self.delete_fingerprint_btn.pack(side='left', padx=5)
        
        # Save button
        self.save_btn = ctk.CTkButton(
            fp_frame,
            text="üíæ L∆∞u v√¢n tay c·ª•c b·ªô", # Changed button text
            command=self.save_local_fingerprints, # Changed command name
            width=370,
            height=40,
            font=("Arial", 14, "bold"),
            state='disabled'
        )
        self.save_btn.pack(pady=10)

        # New button for auto-assigning attendance_device_id
        self.assign_id_btn = ctk.CTkButton(
            fp_frame,
            text="üî¢ G√°n ID m√°y CC t·ª± ƒë·ªông",
            command=self.assign_attendance_device_ids,
            width=370,
            height=40,
            font=("Arial", 14, "bold"),
            state='disabled' # Initially disabled, enable after ERPNext connection
        )
        self.assign_id_btn.pack(pady=10)
        
        # Separator
        ctk.CTkLabel(center_frame, text="", height=1).pack(fill='x', padx=20, pady=5)
        
        # Sync controls
        sync_frame = ctk.CTkFrame(center_frame)
        sync_frame.pack(fill='x', padx=20, pady=10)
        
        ctk.CTkLabel(
            sync_frame,
            text="ƒê·ªìng b·ªô m√°y ch·∫•m c√¥ng:",
            font=("Arial", 14)
        ).pack(pady=5)
        
        # Device selection
        self.device_var = tk.StringVar()
        self.device_combo = ctk.CTkComboBox(
            sync_frame,
            values=["T·∫•t c·∫£ thi·∫øt b·ªã"] + [d['name'] for d in ATTENDANCE_DEVICES],
            variable=self.device_var,
            width=370
        )
        self.device_combo.set("T·∫•t c·∫£ thi·∫øt b·ªã")
        self.device_combo.pack(pady=5)
        
        # Sync buttons
        btn_frame3 = ctk.CTkFrame(sync_frame)
        btn_frame3.pack(pady=5)
        
        self.sync_btn = ctk.CTkButton(
            btn_frame3,
            text="üîÑ ƒê·ªìng b·ªô",
            command=self.sync_to_devices,
            width=180,
            state='disabled'
        )
        self.sync_btn.pack(side='left', padx=5)
        
        self.view_devices_btn = ctk.CTkButton(
            btn_frame3,
            text="üì± Xem thi·∫øt b·ªã",
            command=self.view_devices,
            width=180
        )
        self.view_devices_btn.pack(side='left', padx=5)
        
    def create_right_panel(self, parent):
        """T·∫°o panel b√™n ph·∫£i v·ªõi v√¢n tay v√† log"""
        self.right_panel = ctk.CTkFrame(parent, width=400)
        self.right_panel.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        # Fingerprint section
        fp_section = ctk.CTkFrame(self.right_panel, height=300)
        fp_section.pack(fill='x', padx=5, pady=5)
        fp_section.pack_propagate(False)
        
        ctk.CTkLabel(
            fp_section,
            text="üëÜ V√ÇN TAY",
            font=("Arial", 16, "bold")
        ).pack(pady=5)
        
        # Finger buttons container
        finger_container = ctk.CTkFrame(fp_section)
        finger_container.pack(fill='x', padx=10, pady=10)
        
        # Left and right hand frames
        left_hand_frame = ctk.CTkFrame(finger_container)
        left_hand_frame.pack(side='left', fill='both', expand=True, padx=5)
        
        right_hand_frame = ctk.CTkFrame(finger_container)
        right_hand_frame.pack(side='left', fill='both', expand=True, padx=5)
        
        # Labels for hands
        ctk.CTkLabel(
            left_hand_frame,
            text="Tay tr√°i",
            font=("Arial", 12, "bold")
        ).pack(pady=5)
        
        ctk.CTkLabel(
            right_hand_frame,
            text="Tay ph·∫£i",
            font=("Arial", 12, "bold")
        ).pack(pady=5)
        
        # T·∫°o c√°c button cho t·ª´ng ng√≥n
        self.finger_buttons = {}
        finger_names = {
            5: "Ng√≥n c√°i",
            6: "Ng√≥n tr·ªè",
            7: "Ng√≥n gi·ªØa",
            8: "Ng√≥n nh·∫´n",
            9: "Ng√≥n √∫t",
            0: "Ng√≥n c√°i",
            1: "Ng√≥n tr·ªè",
            2: "Ng√≥n gi·ªØa",
            3: "Ng√≥n nh·∫´n",
            4: "Ng√≥n √∫t"
        }
        
        # S·∫Øp x·∫øp button theo tay tr√°i v√† ph·∫£i
        for finger_id, name in finger_names.items():
            # Ch·ªçn frame d·ª±a v√†o finger_id
            frame = left_hand_frame if finger_id >= 5 else right_hand_frame
            
            # T·∫°o button
            btn = ctk.CTkButton(
                frame,
                text=name,
                width=100,
                height=40,
                command=lambda fid=finger_id: self.select_finger(fid)
            )
            btn.pack(pady=2)
            self.finger_buttons[finger_id] = btn
        
        # Selected finger info
        self.finger_info_label = ctk.CTkLabel(
            finger_container,
            text="Ch·ªçn m·ªôt ng√≥n tay",
            font=("Arial", 12)
        )
        self.finger_info_label.pack(pady=5)
        
        # Fingerprint list
        fp_list_frame = ctk.CTkFrame(fp_section)
        fp_list_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        ctk.CTkLabel(
            fp_list_frame,
            text="Danh s√°ch v√¢n tay ƒë√£ c√≥:",
            font=("Arial", 12)
        ).pack()
        
        self.fp_listbox = tk.Listbox(
            fp_list_frame,
            height=5,
            font=("Arial", 11),
            bg="#212121",
            fg="white",
            selectbackground="#1f538d"
        )
        self.fp_listbox.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Log section
        log_section = ctk.CTkFrame(self.right_panel)
        log_section.pack(fill='both', expand=True, padx=5, pady=5)
        
        ctk.CTkLabel(
            log_section,
            text="üìù NH·∫¨T K√ù",
            font=("Arial", 16, "bold")
        ).pack(pady=5)
        
        # Log text
        log_frame = ctk.CTkFrame(log_section)
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.log_text = tk.Text(
            log_frame,
            wrap='word',
            font=("Consolas", 10),
            bg="#1a1a1a",
            fg="white",
            state='disabled'
        )
        self.log_text.pack(side='left', fill='both', expand=True)
        
        # Scrollbar for log
        log_scrollbar = ctk.CTkScrollbar(log_frame)
        log_scrollbar.pack(side='right', fill='y')
        log_scrollbar.configure(command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        
        # Configure log tags
        self.log_text.tag_config('error', foreground='#ff4444')
        self.log_text.tag_config('warning', foreground='#ffaa00')
        self.log_text.tag_config('success', foreground='#44ff44')
        self.log_text.tag_config('info', foreground='#88ccff')
        self.log_text.tag_config('debug', foreground='#888888')
        
        # Add log handler
        log_handler = LogHandler(self.log_text)
        log_handler.setFormatter(logging.Formatter('%(message)s'))
        logging.getLogger().addHandler(log_handler)
        
        # Clear log button
        clear_btn = ctk.CTkButton(
            log_section,
            text="üóëÔ∏è X√≥a log",
            command=self.clear_log,
            width=100
        )
        clear_btn.pack(pady=5)
    
    def start_background_worker(self):
        """Kh·ªüi ƒë·ªông worker thread cho c√°c t√°c v·ª• n·ªÅn"""
        def worker():
            while True:
                try:
                    task = self.task_queue.get()
                    if task is None:
                        break
                    
                    func, args, kwargs = task
                    func(*args, **kwargs)
                    
                except Exception as e:
                    logger.error(f"L·ªói trong background worker: {str(e)}")
                finally:
                    self.task_queue.task_done()
        
        self.worker_thread = threading.Thread(target=worker, daemon=True)
        self.worker_thread.start()
    
    def run_in_background(self, func, *args, **kwargs):
        """Ch·∫°y m·ªôt h√†m trong background"""
        self.task_queue.put((func, args, kwargs))
    
    # Event handlers
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        if messagebox.askokcancel("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t ·ª©ng d·ª•ng?"):
            logger.info("üëã ƒêang ƒë√≥ng ·ª©ng d·ª•ng...")
            
            # Cleanup
            if self.scanner.is_connected:
                self.scanner.disconnect()
            
            self.sync_manager.disconnect_all_devices()
            
            # Stop worker thread
            self.task_queue.put(None)
            
            self.destroy()
    
    def on_search(self, event):
        """X·ª≠ l√Ω t√¨m ki·∫øm nh√¢n vi√™n"""
        search_text = self.search_entry.get().lower()
        
        # Clear listbox
        self.employee_listbox.delete(0, tk.END)
        
        # Filter and display
        for emp in self.employees_list:
            display_text = f"{emp.get('attendance_device_id', 'N/A')} - {emp['employee']} - {emp['employee_name']}"
            
            if search_text in display_text.lower():
                self.employee_listbox.insert(tk.END, display_text)
    
    def on_employee_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn nh√¢n vi√™n"""
        selection = self.employee_listbox.curselection()
        if not selection:
            return
        
        # Check for unsaved changes
        if self.has_unsaved_changes:
            if not messagebox.askyesno("C·∫£nh b√°o", "B·∫°n c√≥ thay ƒë·ªïi ch∆∞a l∆∞u. B·∫°n c√≥ mu·ªën l∆∞u tr∆∞·ªõc khi chuy·ªÉn nh√¢n vi√™n?"):
                return
        
        # Get selected employee
        selected_text = self.employee_listbox.get(selection[0])
        employee_code = selected_text.split(' - ')[1]
        
        # Find employee data
        for emp in self.employees_list:
            if emp['employee'] == employee_code:
                self.current_employee = emp
                break
        
        if self.current_employee:
            # Update UI
            self.current_emp_label.configure(
                text=f"Nh√¢n vi√™n: {self.current_employee['employee']} - {self.current_employee['employee_name']}",
                text_color="white"
            )
            
            # Enable buttons
            self.add_fingerprint_btn.configure(state='normal')
            self.delete_fingerprint_btn.configure(state='normal')
            self.save_btn.configure(state='normal')
            
            # Load fingerprints and store original state
            self.load_employee_fingerprints()
            self.original_fingerprints = self.current_fingerprints.copy()
            self.has_unsaved_changes = False
    
    def select_finger(self, index):
        """X·ª≠ l√Ω khi ch·ªçn ng√≥n tay"""
        self.selected_finger = index
        
        # Update UI
        self.finger_info_label.configure(
            text=f"Ng√≥n ƒë∆∞·ª£c ch·ªçn: {FINGER_MAPPING[index]}"
        )
        
        # Update button colors
        for i, btn in self.finger_buttons.items():
            if i == self.selected_finger: # Highlight selected finger
                btn.configure(fg_color="#1f538d")
            else:
                # Check if finger has data, if so, keep it green
                if i in self.current_fingerprints and self.current_fingerprints[i].get('template_data'):
                    btn.configure(fg_color="#2d7a2d")
                else:
                    btn.configure(fg_color="#3a3a3a")
    
    # Connection methods
    def connect_scanner(self):
        """K·∫øt n·ªëi v·ªõi scanner v√¢n tay"""
        self.progress_label.configure(text="ƒêang k·∫øt n·ªëi scanner...")
        
        def task():
            if self.scanner.connect():
                self.after(0, lambda: self.scanner_status.configure(text="Scanner: ‚úÖ ƒê√£ k·∫øt n·ªëi"))
                self.after(0, lambda: self.progress_label.configure(text=""))
            else:
                self.after(0, lambda: self.scanner_status.configure(text="Scanner: ‚ùå L·ªói k·∫øt n·ªëi"))
                self.after(0, lambda: self.progress_label.configure(text=""))
        
        self.run_in_background(task)
    
    def connect_erpnext(self):
        """K·∫øt n·ªëi v·ªõi ERPNext"""
        self.progress_label.configure(text="ƒêang k·∫øt n·ªëi ERPNext...")
        
        def task():
            if self.erpnext.test_connection():
                self.after(0, lambda: self.erpnext_status.configure(text="ERPNext: ‚úÖ ƒê√£ k·∫øt n·ªëi"))
                self.after(0, lambda: self.sync_btn.configure(state='normal'))
                self.after(0, lambda: self.assign_id_btn.configure(state='normal')) # Enable assign ID button
                self.after(0, self.refresh_employee_list)
            else:
                self.after(0, lambda: self.erpnext_status.configure(text="ERPNext: ‚ùå L·ªói k·∫øt n·ªëi"))
            
            self.after(0, lambda: self.progress_label.configure(text=""))
        
        self.run_in_background(task)
    
    def refresh_employee_list(self):
        """L√†m m·ªõi danh s√°ch nh√¢n vi√™n"""
        self.progress_label.configure(text="ƒêang t·∫£i danh s√°ch nh√¢n vi√™n...")
        
        def task():
            employees = self.erpnext.get_all_employees()
            self.employees_list = employees
            
            # Load existing fingerprints from local data file
            self.load_all_local_fingerprints()
            
            self.after(0, self._update_employee_list)
            self.after(0, lambda: self.progress_label.configure(text=""))
        
        self.run_in_background(task)
    
    def _update_employee_list(self):
        """C·∫≠p nh·∫≠t danh s√°ch nh√¢n vi√™n trong GUI"""
        self.employee_listbox.delete(0, tk.END)
        
        # Sort employees by 'employee' in descending order
        sorted_employees = sorted(self.employees_list, key=lambda x: x.get('employee', ''), reverse=True)

        for emp in sorted_employees:
            # Check if attendance_device_id exists and is not None/empty
            attendance_id = emp.get('attendance_device_id')
            if attendance_id is None or attendance_id == "":
                attendance_id_display = "N/A"
            else:
                attendance_id_display = str(attendance_id)

            display_text = f"{attendance_id_display} - {emp['employee']} - {emp['employee_name']}"
            self.employee_listbox.insert(tk.END, display_text)

        # Re-select current employee if still in the list
        if self.current_employee:
            for i, emp in enumerate(sorted_employees):
                if emp['employee'] == self.current_employee['employee']:
                    self.employee_listbox.selection_set(i)
                    self.employee_listbox.see(i)
                    break
        
    def load_all_local_fingerprints(self):
        """T·∫£i t·∫•t c·∫£ d·ªØ li·ªáu v√¢n tay t·ª´ th∆∞ m·ª•c data c·ª•c b·ªô (t·ª´ m·ªôt file duy nh·∫•t)"""
        file_path = os.path.join('data', 'all_fingerprints.json')
        
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    all_fingerprint_data = json.load(f)
                
                logger.info(f"Loading fingerprints from {file_path}")
                
                # Create a mapping from employee_id to their fingerprint data for quick lookup
                fingerprint_map = {}
                for emp_data in all_fingerprint_data:
                    employee_id = emp_data['employee']
                    fingerprints = []
                    
                    for fp in emp_data.get('fingerprints', []):
                        try:
                            # Keep template_data as base64 string
                            if isinstance(fp.get('template_data'), str):
                                fingerprints.append({
                                    'finger_index': fp['finger_index'],
                                    'template_data': fp['template_data'],  # Keep as base64 string
                                    'quality_score': fp.get('quality_score', 0)
                                })
                                logger.info(f"Successfully loaded fingerprint {fp['finger_index']} for employee {employee_id}")
                        except Exception as e:
                            logger.error(f"Error loading fingerprint for {employee_id}: {e}")
                    
                    fingerprint_map[employee_id] = fingerprints
                    # logger.info(f"Loaded {len(fingerprints)} fingerprints for employee {employee_id}")

                # Update self.employees_list with fingerprint data
                for emp in self.employees_list:
                    emp_fingerprints = fingerprint_map.get(emp['employee'], [])
                    emp['fingerprints'] = emp_fingerprints
                    
                    # If this is the current employee, update current_fingerprints
                    if self.current_employee and emp['employee'] == self.current_employee['employee']:
                        self.current_fingerprints = {fp['finger_index']: fp for fp in emp_fingerprints}
                        logger.info(f"Updated current_fingerprints for {emp['employee']} with {len(emp_fingerprints)} fingerprints")
                
                logger.info("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu v√¢n tay c·ª•c b·ªô cho t·∫•t c·∫£ nh√¢n vi√™n.")
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói ƒë·ªçc file d·ªØ li·ªáu v√¢n tay c·ª•c b·ªô: {e}")
        else:
            logger.info("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file 'all_fingerprints.json'. B·∫Øt ƒë·∫ßu v·ªõi d·ªØ li·ªáu v√¢n tay tr·ªëng.")

        return fingerprint_map

    def load_employee_fingerprints(self):
        """T·∫£i d·ªØ li·ªáu v√¢n tay c·ªßa nh√¢n vi√™n hi·ªán t·∫°i t·ª´ b·ªô nh·ªõ c·ª•c b·ªô"""
        if not self.current_employee:
            return
        
        self.progress_label.configure(text="ƒêang t·∫£i d·ªØ li·ªáu v√¢n tay...")
        
        # Get fingerprints from the current_employee object (which was loaded from local data)
        fingerprints = self.current_employee.get('fingerprints', [])
        
        # Update current fingerprints
        self.current_fingerprints = {}
        for fp in fingerprints:
            self.current_fingerprints[fp['finger_index']] = fp
        
        self.after(0, self._update_fingerprint_display)
        self.after(0, lambda: self.progress_label.configure(text=""))
        
    def _update_fingerprint_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã v√¢n tay"""
        # Update finger buttons
        for i, btn in self.finger_buttons.items():
            if i == self.selected_finger: # Highlight selected finger
                btn.configure(fg_color="#1f538d")
            else:
                # Check if finger has data, if so, keep it green
                if i in self.current_fingerprints and self.current_fingerprints[i].get('template_data'):
                    btn.configure(fg_color="#2d7a2d")
                else:
                    btn.configure(fg_color="#3a3a3a")
        
        # Update fingerprint list
        self.fp_listbox.delete(0, tk.END)
        for finger_idx, fp_data in sorted(self.current_fingerprints.items()):
            if fp_data.get('template_data'): # Only display if template data exists
                self.fp_listbox.insert(
                    tk.END,
                    f"Ng√≥n {finger_idx}: {FINGER_MAPPING[finger_idx]} - Ch·∫•t l∆∞·ª£ng: {fp_data.get('quality_score', 0)}"
                )
        
        # Enable save button if there are changes (implicitly handled by on_employee_select)
        # if self.current_fingerprints:
        #     self.save_btn.configure(state='normal')
    
    def add_fingerprint(self):
        """Th√™m v√¢n tay m·ªõi"""
        if not self.current_employee:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn nh√¢n vi√™n tr∆∞·ªõc!")
            return
        
        if not self.scanner.is_connected:
            messagebox.showerror("L·ªói", "Scanner ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi!")
            return
        
        if self.is_scanning:
            messagebox.showwarning("C·∫£nh b√°o", "ƒêang qu√©t v√¢n tay, vui l√≤ng ƒë·ª£i...")
            return
        
        self.is_scanning = True
        self.progress_label.configure(text=f"ƒêang qu√©t v√¢n tay ng√≥n {self.selected_finger} ({FINGER_MAPPING[self.selected_finger]})...")
        
        def task():
            try:
                # Enroll fingerprint
                template = self.scanner.enroll_fingerprint(self.selected_finger)
                
                if template:
                    # Assign a default quality score
                    quality_score = FINGERPRINT_CONFIG.get('quality_threshold', 80)
                    
                    logger.info(f"Successfully enrolled fingerprint for finger {self.selected_finger}")
                    logger.info(f"Template type: {type(template)}")
                    
                    # Convert template to base64 for storage
                    try:
                        # Handle different types of template data
                        if isinstance(template, bytes):
                            template_b64 = base64.b64encode(template).decode('utf-8')
                        elif str(type(template)) == "<class 'System.Byte[]'>":
                            # Convert System.Byte[] to bytes
                            template_bytes = bytes(template)
                            template_b64 = base64.b64encode(template_bytes).decode('utf-8')
                        else:
                            logger.error(f"Unexpected template type: {type(template)}")
                            raise ValueError(f"Unsupported template type: {type(template)}")
                        
                        # Save to memory (current_fingerprints dict)
                        self.current_fingerprints[self.selected_finger] = {
                            'finger_index': self.selected_finger,
                            'template_data': template_b64,  # Store as base64 string
                            'quality_score': quality_score
                        }
                        
                        # Update the current_employee's fingerprints list
                        self.current_employee['fingerprints'] = list(self.current_fingerprints.values())
                        
                        # Update the employee in employees_list
                        for i, emp in enumerate(self.employees_list):
                            if emp['employee'] == self.current_employee['employee']:
                                self.employees_list[i] = self.current_employee
                                break
                        
                        # Mark as changed
                        self.has_unsaved_changes = True
                        self.save_btn.configure(text="üíæ L∆∞u v√¢n tay c·ª•c b·ªô (C√≥ thay ƒë·ªïi)")
                        
                        
                        logger.info(f"Updated fingerprints for employee {self.current_employee['employee']}")
                        logger.info(f"Current fingerprints count: {len(self.current_fingerprints)}")
                        
                        self.after(0, self._update_fingerprint_display)
                        self.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m v√¢n tay th√†nh c√¥ng! Vui l√≤ng l∆∞u l·∫°i ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."))
                    except Exception as e:
                        logger.error(f"Error converting template data: {str(e)}")
                        self.after(0, lambda: messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu v√¢n tay: {e}"))
                else:
                    logger.error("Failed to enroll fingerprint")
                    self.after(0, lambda: messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ qu√©t v√¢n tay!"))
            except Exception as e:
                logger.error(f"Error in add_fingerprint: {str(e)}")
                self.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"))
            finally:
                self.is_scanning = False
                self.after(0, lambda: self.progress_label.configure(text=""))
        
        self.run_in_background(task)
    
    def delete_fingerprint(self):
        """X√≥a v√¢n tay"""
        if not self.current_employee:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn nh√¢n vi√™n tr∆∞·ªõc!")
            return
        
        if self.selected_finger not in self.current_fingerprints:
            messagebox.showwarning("C·∫£nh b√°o", "Ng√≥n tay n√†y ch∆∞a c√≥ d·ªØ li·ªáu!")
            return
        
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a v√¢n tay ng√≥n {self.selected_finger} ({FINGER_MAPPING[self.selected_finger]})?"):
            self.progress_label.configure(text="ƒêang x√≥a v√¢n tay...")
            
            # Remove from current_fingerprints in memory
            if self.selected_finger in self.current_fingerprints:
                del self.current_fingerprints[self.selected_finger]
                
                # Update the current_employee's fingerprints list
                self.current_employee['fingerprints'] = list(self.current_fingerprints.values())
                
                # Update the employee in employees_list
                for i, emp in enumerate(self.employees_list):
                    if emp['employee'] == self.current_employee['employee']:
                        self.employees_list[i] = self.current_employee
                        break
                
                # Mark as changed
                self.has_unsaved_changes = True
                self.save_btn.configure(text="üíæ L∆∞u v√¢n tay c·ª•c b·ªô (C√≥ thay ƒë·ªïi)")

                self.after(0, self._update_fingerprint_display)
                self.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a v√¢n tay kh·ªèi b·ªô nh·ªõ c·ª•c b·ªô! Vui l√≤ng l∆∞u l·∫°i ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."))
            else:
                self.after(0, lambda: messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y v√¢n tay ƒë·ªÉ x√≥a trong b·ªô nh·ªõ c·ª•c b·ªô."))
            
            self.after(0, lambda: self.progress_label.configure(text=""))
    
    def save_local_fingerprints(self):
        """L∆∞u d·ªØ li·ªáu v√¢n tay c·ªßa T·∫§T C·∫¢ nh√¢n vi√™n v√†o m·ªôt file JSON c·ª•c b·ªô duy nh·∫•t"""
        if not self.has_unsaved_changes:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u!")
            return
            
        self.progress_label.configure(text="ƒêang l∆∞u d·ªØ li·ªáu v√¢n tay c·ª•c b·ªô...")
        
        def task():
            try:
                # Create data directory if it doesn't exist
                os.makedirs('data', exist_ok=True)
                
                # Load existing data first
                file_path = os.path.join('data', 'all_fingerprints.json')
                existing_data = []
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                
                # Create a mapping of existing data
                existing_map = {emp['employee']: emp for emp in existing_data}
                
                # Update only changed employees
                for emp in self.employees_list:
                    if emp['employee'] in existing_map:
                        # Update existing employee data
                        existing_map[emp['employee']].update({
                            'name': emp['name'],
                            'employee_name': emp['employee_name'],
                            'attendance_device_id': emp['attendance_device_id'],
                            'fingerprints': emp.get('fingerprints', [])
                        })
                    else:
                        # Add new employee
                        existing_map[emp['employee']] = {
                            'name': emp['name'],
                            'employee': emp['employee'],
                            'employee_name': emp['employee_name'],
                            'attendance_device_id': emp['attendance_device_id'],
                            'fingerprints': emp.get('fingerprints', [])
                        }
                
                # Convert back to list
                all_employee_data_to_save = list(existing_map.values())
                
                # Save to file
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(all_employee_data_to_save, f, ensure_ascii=False, indent=4)
                
                logger.info(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√¢n tay c·ªßa t·∫•t c·∫£ nh√¢n vi√™n v√†o file c·ª•c b·ªô: {file_path}")
                
                # Reset change tracking
                self.has_unsaved_changes = False
                self.save_btn.configure(text="üíæ L∆∞u v√¢n tay c·ª•c b·ªô")
                self.original_fingerprints = self.current_fingerprints.copy()
                
                self.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u d·ªØ li·ªáu v√¢n tay c·ªßa t·∫•t c·∫£ nh√¢n vi√™n v√†o file c·ª•c b·ªô!"))
                
                # After saving, reload all local fingerprints to ensure in-memory data is consistent
                self.after(0, self.load_all_local_fingerprints)
                self.after(0, self.load_employee_fingerprints)
                self.after(0, self._update_employee_list)

            except Exception as e:
                logger.error(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu v√¢n tay c·ª•c b·ªô: {str(e)}")
                self.after(0, lambda: messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu v√†o file c·ª•c b·ªô: {e}"))
            
            self.after(0, lambda: self.progress_label.configure(text=""))
        
        self.run_in_background(task)

    def assign_attendance_device_ids(self):
        """
        T·ª± ƒë·ªông g√°n attendance_device_id tƒÉng d·∫ßn cho c√°c nh√¢n vi√™n c√≥ ID null ho·∫∑c tr·ªëng.
        Sau ƒë√≥, ƒë·ªìng b·ªô c√°c ID n√†y l√™n ERPNext.
        """
        if not self.erpnext.is_connected:
            messagebox.showerror("L·ªói", "ERPNext ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi!")
            return

        if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën t·ª± ƒë·ªông g√°n ID m√°y ch·∫•m c√¥ng v√† ƒë·ªìng b·ªô l√™n ERPNext?"):
            return

        self.progress_label.configure(text="ƒêang g√°n ID m√°y ch·∫•m c√¥ng...")

        def task():
            try:
                # Get current max attendance_device_id
                max_id = 0
                for emp in self.employees_list:
                    try:
                        if emp.get('attendance_device_id'):
                            current_id = int(emp['attendance_device_id'])
                            if current_id > max_id:
                                max_id = current_id
                    except ValueError:
                        continue # Ignore invalid IDs

                next_id = max_id + 1
                updated_count = 0
                
                employees_to_update_erpnext = []
                updated_employee_names_for_msg = [] # For the message box

                for emp in self.employees_list:
                    if not emp.get('attendance_device_id') or str(emp['attendance_device_id']).strip() == "":
                        # Assign new ID
                        emp['attendance_device_id'] = str(next_id)
                        employees_to_update_erpnext.append(emp)
                        updated_employee_names_for_msg.append(f"{emp['employee']} - {emp['employee_name']}")
                        next_id += 1
                        updated_count += 1
                        logger.info(f"ƒê√£ g√°n ID {emp['attendance_device_id']} cho {emp['employee_name']}")

                if updated_count > 0:
                    # Sync updated IDs to ERPNext
                    sync_success_count = 0
                    for emp_to_update in employees_to_update_erpnext:
                        if self.erpnext.update_employee_attendance_device_id(emp_to_update['name'], int(emp_to_update['attendance_device_id'])):
                            sync_success_count += 1
                    
                    self.after(0, self.refresh_employee_list) # Refresh list to show new IDs
                    
                    # Construct detailed message
                    detail_msg = "\n".join(updated_employee_names_for_msg)
                    final_msg = f"ƒê√£ g√°n v√† ƒë·ªìng b·ªô {updated_count} ID m√°y ch·∫•m c√¥ng m·ªõi l√™n ERPNext.\n" \
                                f"Th√†nh c√¥ng {sync_success_count}/{updated_count} b·∫£n ghi.\n\n" \
                                f"Danh s√°ch nh√¢n vi√™n ƒë∆∞·ª£c c·∫≠p nh·∫≠t:\n{detail_msg}"

                    self.after(0, lambda: messagebox.showinfo(
                        "Th√†nh c√¥ng",
                        final_msg
                    ))
                else:
                    self.after(0, lambda: messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ nh√¢n vi√™n n√†o c·∫ßn g√°n ID m√°y ch·∫•m c√¥ng m·ªõi."))

            except Exception as e:
                logger.error(f"‚ùå L·ªói khi g√°n ID m√°y ch·∫•m c√¥ng t·ª± ƒë·ªông: {str(e)}")
                self.after(0, lambda: messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ g√°n ID m√°y ch·∫•m c√¥ng t·ª± ƒë·ªông: {e}"))
            finally:
                self.after(0, lambda: self.progress_label.configure(text=""))
        
        self.run_in_background(task)
    
    def sync_to_devices(self):
        """ƒê·ªìng b·ªô v√¢n tay ƒë·∫øn c√°c m√°y ch·∫•m c√¥ng"""
        if not self.current_employee:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn nh√¢n vi√™n tr∆∞·ªõc khi ƒë·ªìng b·ªô")
            return
            
        if not self.current_fingerprints:
            messagebox.showwarning("C·∫£nh b√°o", "Nh√¢n vi√™n ch∆∞a c√≥ d·ªØ li·ªáu v√¢n tay")
            return
            
        # Ki·ªÉm tra attendance_device_id
        if not self.current_employee.get('attendance_device_id'):
            messagebox.showwarning("C·∫£nh b√°o", "Nh√¢n vi√™n ch∆∞a ƒë∆∞·ª£c g√°n ID m√°y ch·∫•m c√¥ng")
            return
            
        # X√°c nh·∫≠n ƒë·ªìng b·ªô
        if not messagebox.askyesno("X√°c nh·∫≠n", 
            f"B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·ªìng b·ªô v√¢n tay c·ªßa {self.current_employee['employee_name']} ƒë·∫øn c√°c m√°y ch·∫•m c√¥ng?"):
            return
            
        def task():
            try:
                # Chu·∫©n b·ªã d·ªØ li·ªáu
                employee_data = {
                    'employee': self.current_employee['employee'],
                    'employee_name': self.current_employee['employee_name'],
                    'attendance_device_id': self.current_employee['attendance_device_id']
                }
                
                # Chuy·ªÉn ƒë·ªïi current_fingerprints th√†nh list
                fingerprints = []
                for finger_index, fp_data in self.current_fingerprints.items():
                    if fp_data.get('template_data'):
                        fingerprints.append({
                            'finger_index': finger_index,
                            'template_data': fp_data['template_data'],
                            'quality_score': fp_data.get('quality_score', 0)
                        })
                
                if not fingerprints:
                    logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ v√¢n tay h·ª£p l·ªá ƒë·ªÉ ƒë·ªìng b·ªô")
                    return
                    
                # Th√™m fingerprints v√†o employee_data
                employee_data['fingerprints'] = fingerprints
                
                # ƒê·ªìng b·ªô ƒë·∫øn t·ª´ng thi·∫øt b·ªã
                results = self.sync_manager.sync_to_all_devices([employee_data])
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                success_count = sum(1 for r in results.values() if r[0] > 0)
                total_devices = len(results)
                
                if success_count == total_devices:
                    messagebox.showinfo("Th√†nh c√¥ng", 
                        f"ƒê√£ ƒë·ªìng b·ªô th√†nh c√¥ng ƒë·∫øn {success_count}/{total_devices} thi·∫øt b·ªã")
                else:
                    messagebox.showwarning("C·∫£nh b√°o",
                        f"ƒê·ªìng b·ªô th√†nh c√¥ng ƒë·∫øn {success_count}/{total_devices} thi·∫øt b·ªã")
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói ƒë·ªìng b·ªô: {str(e)}")
                messagebox.showerror("L·ªói", f"L·ªói ƒë·ªìng b·ªô: {str(e)}")
                
        # Ch·∫°y trong background
        self.run_in_background(task)
    
    def view_devices(self):
        """Xem th√¥ng tin c√°c thi·∫øt b·ªã"""
        devices_window = ctk.CTkToplevel(self)
        devices_window.title("Th√¥ng tin thi·∫øt b·ªã")
        devices_window.geometry("800x600")
        
        # Create treeview
        tree = ttk.Treeview(
            devices_window,
            columns=('IP', 'Port', 'Model', 'Location'),
            show='headings' # Changed from 'tree headings' to 'headings' for cleaner display
        )
        
        # Define columns
        tree.heading('#1', text='ƒê·ªãa ch·ªâ IP') # Changed from #0 to #1
        tree.heading('#2', text='Port')
        tree.heading('#3', text='Model')
        tree.heading('#4', text='V·ªã tr√≠')

        # Set column widths
        tree.column('#1', width=100, anchor='center')
        tree.column('#2', width=70, anchor='center')
        tree.column('#3', width=150, anchor='center')
        tree.column('#4', width=200, anchor='w')
        
        # Add a column for device name (hidden, used for selection)
        tree["displaycolumns"] = ('IP', 'Port', 'Model', 'Location')
        
        # Add devices
        for device in ATTENDANCE_DEVICES:
            tree.insert('', 'end',
                       values=(device['ip'], device['port'], device['model'], device['location']),
                       text=device['name']) # Store device name in text for easy retrieval
        
        tree.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Test connection button
        def test_connection():
            selection = tree.selection()
            if selection:
                # Get the device name from the 'text' property of the selected item
                device_name = tree.item(selection[0], 'text')
                # Find device config
                for device in ATTENDANCE_DEVICES:
                    if device['name'] == device_name:
                        self.progress_label.configure(text=f"ƒêang ki·ªÉm tra {device_name}...")
                        
                        def task():
                            zk = self.sync_manager.connect_device(device)
                            if zk:
                                self.sync_manager.disconnect_device(device['id'])
                                self.after(0, lambda: messagebox.showinfo(
                                    "Th√†nh c√¥ng",
                                    f"K·∫øt n·ªëi v·ªõi {device_name} th√†nh c√¥ng!"
                                ))
                            else:
                                self.after(0, lambda: messagebox.showerror(
                                    "L·ªói",
                                    f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi {device_name}!"
                                ))
                            
                            self.after(0, lambda: self.progress_label.configure(text=""))
                        
                        self.run_in_background(task)
                        break
        
        test_btn = ctk.CTkButton(
            devices_window,
            text="üîå Ki·ªÉm tra k·∫øt n·ªëi",
            command=test_connection
        )
        test_btn.pack(pady=10)
    
    def clear_log(self):
        """X√≥a log hi·ªÉn th·ªã"""
        self.log_text.configure(state='normal')
        self.log_text.delete(1.0, tk.END)
        self.log_text.configure(state='disabled')


def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    # Create data directory if not exists
    os.makedirs('data', exist_ok=True)
    os.makedirs('log', exist_ok=True)
    os.makedirs('photos', exist_ok=True)
    
    # Run app
    app = FingerprintApp()
    app.mainloop()


if __name__ == "__main__":
    main()
