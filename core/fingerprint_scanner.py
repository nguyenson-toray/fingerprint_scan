# fingerprint_scanner.py
"""
Module x·ª≠ l√Ω qu√©t v√¢n tay s·ª≠ d·ª•ng libzkfp.dll tr·ª±c ti·∫øp
"""

import logging
import ctypes
import time
from typing import Optional, List
from config import SCANNER_CONFIG, FINGERPRINT_CONFIG

logger = logging.getLogger(__name__)


class TZKFPCapParams(ctypes.Structure):
    """C·∫•u tr√∫c tham s·ªë qu√©t v√¢n tay"""
    _fields_ = [
        ("imgWidth", ctypes.c_uint),
        ("imgHeight", ctypes.c_uint),
        ("nDPI", ctypes.c_uint)
    ]


class FingerprintScanner:
    """L·ªõp qu·∫£n l√Ω k·∫øt n·ªëi v√† qu√©t v√¢n tay s·ª≠ d·ª•ng libzkfp.dll"""
    
    def __init__(self):
        self.zkfp = None
        self.handle = None
        self.hDBCache = None
        self.is_connected = False
        self.img_width = 0
        self.img_height = 0
        self.template_buf_size = 2048
        self.merge_count = FINGERPRINT_CONFIG.get('scan_count', 3)
        self.quality_threshold = FINGERPRINT_CONFIG.get('quality_threshold', 50)
        logger.info("FingerprintScanner ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.")
        
    def connect(self) -> bool:
        """K·∫øt n·ªëi v·ªõi thi·∫øt b·ªã scanner v√¢n tay"""
        if self.is_connected:
            logger.info("Scanner ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi.")
            return True

        try:
            # Load DLL
            try:
                self.zkfp = ctypes.windll.LoadLibrary("libzkfp.dll")
            except Exception as e:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ load libzkfp.dll: {e}")
                return False
            
            # Khai b√°o h√†m
            self._declare_functions()
            
            # Kh·ªüi t·∫°o SDK
            if self.zkfp.ZKFPM_Init() != 0:
                logger.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o SDK m√°y qu√©t v√¢n tay.")
                return False
            
            # Ki·ªÉm tra s·ªë thi·∫øt b·ªã
            device_count = self.zkfp.ZKFPM_GetDeviceCount()
            if device_count == 0:
                logger.error("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã qu√©t v√¢n tay n√†o.")
                self.zkfp.ZKFPM_Terminate()
                return False
            
            # M·ªü thi·∫øt b·ªã ƒë·∫ßu ti√™n
            self.handle = self.zkfp.ZKFPM_OpenDevice(0)
            if not self.handle:
                logger.error("‚ùå Kh√¥ng th·ªÉ m·ªü thi·∫øt b·ªã qu√©t.")
                self.zkfp.ZKFPM_Terminate()
                return False
            
            # L·∫•y th√¥ng s·ªë thi·∫øt b·ªã
            params = TZKFPCapParams()
            if self.zkfp.ZKFPM_GetCaptureParams(self.handle, ctypes.byref(params)) == 0:
                self.img_width = params.imgWidth
                self.img_height = params.imgHeight
                logger.info(f"üì∑ K√≠ch th∆∞·ªõc ·∫£nh: {self.img_width}x{self.img_height}, DPI: {params.nDPI}")
            
            # Kh·ªüi t·∫°o DB Cache cho merge
            self.hDBCache = self.zkfp.ZKFPM_DBInit()
            if not self.hDBCache:
                logger.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o b·ªô ƒë·ªám DB ƒë·ªÉ merge v√¢n tay.")
                self.zkfp.ZKFPM_CloseDevice(self.handle)
                self.zkfp.ZKFPM_Terminate()
                return False
            
            self.is_connected = True
            logger.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi thi·∫øt b·ªã qu√©t v√¢n tay (t√¨m th·∫•y {device_count} thi·∫øt b·ªã).")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o ho·∫∑c k·∫øt n·ªëi scanner: {e}")
            self._cleanup()
            return False
    
    def _declare_functions(self):
        """Khai b√°o c√°c h√†m DLL"""
        # H√†m c∆° b·∫£n
        self.zkfp.ZKFPM_Init.restype = ctypes.c_int
        self.zkfp.ZKFPM_Terminate.restype = ctypes.c_int
        self.zkfp.ZKFPM_GetDeviceCount.restype = ctypes.c_int
        
        self.zkfp.ZKFPM_OpenDevice.argtypes = [ctypes.c_int]
        self.zkfp.ZKFPM_OpenDevice.restype = ctypes.c_void_p
        
        self.zkfp.ZKFPM_CloseDevice.argtypes = [ctypes.c_void_p]
        self.zkfp.ZKFPM_CloseDevice.restype = ctypes.c_int
        
        self.zkfp.ZKFPM_GetCaptureParams.argtypes = [ctypes.c_void_p, ctypes.POINTER(TZKFPCapParams)]
        self.zkfp.ZKFPM_GetCaptureParams.restype = ctypes.c_int
        
        self.zkfp.ZKFPM_AcquireFingerprint.argtypes = [
            ctypes.c_void_p,
            ctypes.POINTER(ctypes.c_ubyte),
            ctypes.c_uint,
            ctypes.POINTER(ctypes.c_ubyte),
            ctypes.POINTER(ctypes.c_uint)
        ]
        self.zkfp.ZKFPM_AcquireFingerprint.restype = ctypes.c_int
        
        # H√†m merge
        self.zkfp.ZKFPM_DBInit.restype = ctypes.c_void_p
        
        self.zkfp.ZKFPM_DBMerge.argtypes = [
            ctypes.c_void_p,
            ctypes.POINTER(ctypes.c_ubyte),
            ctypes.POINTER(ctypes.c_ubyte),
            ctypes.POINTER(ctypes.c_ubyte),
            ctypes.POINTER(ctypes.c_ubyte),
            ctypes.POINTER(ctypes.c_uint)
        ]
        self.zkfp.ZKFPM_DBMerge.restype = ctypes.c_int
        
        self.zkfp.ZKFPM_DBFree.argtypes = [ctypes.c_void_p]
        self.zkfp.ZKFPM_DBFree.restype = ctypes.c_int
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã scanner"""
        if self.is_connected:
            try:
                self._cleanup()
                self.is_connected = False
                logger.info("‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi scanner th√†nh c√¥ng.")
                return True
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi scanner: {e}")
                return False
        else:
            logger.info("Scanner kh√¥ng ƒë∆∞·ª£c k·∫øt n·ªëi.")
            return True
    
    def _cleanup(self):
        """D·ªçn d·∫πp t√†i nguy√™n"""
        if self.hDBCache:
            self.zkfp.ZKFPM_DBFree(self.hDBCache)
            self.hDBCache = None
            
        if self.handle:
            self.zkfp.ZKFPM_CloseDevice(self.handle)
            self.handle = None
            
        if self.zkfp:
            self.zkfp.ZKFPM_Terminate()
    
    def get_device_info(self) -> str:
        """L·∫•y th√¥ng tin thi·∫øt b·ªã scanner"""
        if not self.is_connected:
            return "Ch∆∞a k·∫øt n·ªëi"
            
        try:
            return f"{SCANNER_CONFIG['model']} - USB Connected ({self.img_width}x{self.img_height})"
        except:
            return SCANNER_CONFIG['model']
    
    def capture_fingerprint(self, finger_index: int, scan_number: int = 1) -> Optional[bytes]:
        """
        Qu√©t v√¢n tay m·ªôt l·∫ßn.
        Args:
            finger_index: Ch·ªâ s·ªë ng√≥n tay (0-9).
            scan_number: L·∫ßn qu√©t th·ª© m·∫•y (1-3).
        Returns:
            Template data n·∫øu ch·ª•p th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i.
        """
        if not self.is_connected or not self.zkfp or not self.handle:
            logger.error("‚ùå Scanner ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi.")
            return None
            
        try:
            logger.info(f"üîç ƒêang ch·ªù qu√©t v√¢n tay l·∫ßn {scan_number}/{self.merge_count}...")
            
            # T·∫°o buffer
            image_buf = (ctypes.c_ubyte * (self.img_width * self.img_height))()
            template_buf = (ctypes.c_ubyte * self.template_buf_size)()
            template_len = ctypes.c_uint(self.template_buf_size)
            
            start_time = time.time()
            timeout = SCANNER_CONFIG.get('timeout', 30)
            
            # Hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng h∆°n
            logger.info(f"üëÜ Vui l√≤ng ƒë·∫∑t ng√≥n tay l√™n m√°y qu√©t (l·∫ßn {scan_number}/{self.merge_count})")
            
            while time.time() - start_time < timeout:
                ret = self.zkfp.ZKFPM_AcquireFingerprint(
                    self.handle,
                    image_buf,
                    self.img_width * self.img_height,
                    template_buf,
                    ctypes.byref(template_len)
                )
                
                if ret == 0:
                    template_data = bytes(template_buf[:template_len.value])
                    logger.info(f"‚úÖ ƒê√£ ch·ª•p v√¢n tay l·∫ßn {scan_number} th√†nh c√¥ng.")
                    return template_data
                    
                time.sleep(0.1)
                
            logger.error(f"‚ùå H·∫øt th·ªùi gian ch·ªù qu√©t v√¢n tay l·∫ßn {scan_number}.")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi qu√©t v√¢n tay: {str(e)}")
            return None
    
    def enroll_fingerprint(self, finger_index: int) -> Optional[bytes]:
        """
        ƒêƒÉng k√Ω v√¢n tay m·ªõi (qu√©t 3 l·∫ßn v√† merge).
        Args:
            finger_index: Ch·ªâ s·ªë ng√≥n tay (0-9).
        Returns:
            D·ªØ li·ªáu template v√¢n tay ƒë√£ merge n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i.
        """
        if not self.is_connected or not self.zkfp or not self.handle:
            logger.error("‚ùå Scanner ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi.")
            return None
            
        if not self.hDBCache:
            logger.error("‚ùå DB Cache ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return None
            
        collected_templates = []
        
        # Thu th·∫≠p 3 m·∫´u v√¢n tay
        for i in range(self.merge_count):
            logger.info(f"üì∑ Qu√©t l·∫ßn {i+1}/{self.merge_count}")
            
            template = self.capture_fingerprint(finger_index, i+1)
            if not template:
                logger.error(f"‚ùå Qu√©t l·∫ßn {i+1} th·∫•t b·∫°i")
                return None
            
            collected_templates.append(template)
            
            if i < self.merge_count - 1:
                logger.info("üëÜ Vui l√≤ng nh·∫•c ng√≥n tay v√† ƒë·∫∑t l·∫°i")
                time.sleep(2)
        
        # Merge 3 template
        try:
            logger.info("üîÑ ƒêang merge 3 m·∫´u v√¢n tay...")
            
            # T·∫°o buffer cho k·∫øt qu·∫£ merge
            merged_template_buf = (ctypes.c_ubyte * self.template_buf_size)()
            merged_template_len = ctypes.c_uint(self.template_buf_size)
            
            # Chuy·ªÉn ƒë·ªïi template th√†nh ctypes array
            t1_c = (ctypes.c_ubyte * len(collected_templates[0]))(*collected_templates[0])
            t2_c = (ctypes.c_ubyte * len(collected_templates[1]))(*collected_templates[1])
            t3_c = (ctypes.c_ubyte * len(collected_templates[2]))(*collected_templates[2])
            
            # Th·ª±c hi·ªán merge
            ret_merge = self.zkfp.ZKFPM_DBMerge(
                self.hDBCache,
                t1_c,
                t2_c,
                t3_c,
                merged_template_buf,
                ctypes.byref(merged_template_len)
            )
            
            if ret_merge == 0:
                final_template_data = bytes(merged_template_buf[:merged_template_len.value])
                logger.info(f"‚úÖ Merge v√¢n tay th√†nh c√¥ng! K√≠ch th∆∞·ªõc template: {len(final_template_data)} bytes.")
                return final_template_data
            else:
                logger.error(f"‚ùå L·ªói khi merge v√¢n tay. M√£ l·ªói: {ret_merge}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi merge v√¢n tay: {str(e)}")
            return None